<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[DEJAVU'S NOTES]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yiqivr.com//"/>
  <updated>2015-08-04T15:15:50.000Z</updated>
  <id>http://yiqivr.com//</id>
  
  <author>
    <name><![CDATA[Dejavu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在Android/iOS中使用Protobuf技术]]></title>
    <link href="http://yiqivr.com/2015/03/25/%E5%9C%A8Android-iOS%E4%B8%AD%E4%BD%BF%E7%94%A8Protobuf%E6%8A%80%E6%9C%AF/"/>
    <id>http://yiqivr.com/2015/03/25/在Android-iOS中使用Protobuf技术/</id>
    <published>2015-03-25T00:45:42.000Z</published>
    <updated>2015-08-04T15:15:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>在开发中，我们免不了要与服务器进行网络数据交互，而这些数据采用了各种各样的方式，现如今比较流行的是JSON格式，而XML格式因为其解析速度慢、传输数据量较大等性能上的诟病被大家逐渐抛弃了。今天的主角是Protobuf（Protocol Buffers），也是完成此类任务的一个选择。</p>
<h3 id="什么是Protobuf">什么是Protobuf</h3><p>protobuf是google提供的一个开源序列化框架，类似于XML，JSON这样的数据表示语言，其最大的特点是基于二进制，因此比传统的XML表示高效短小得多。虽然是二进制数据格式，但并没有因此变得复杂，开发人员通过按照一定的语法定义结构化的消息格式，然后送给命令行工具，工具将自动生成相关的类，可以支持php、java、c++、python等语言环境（由于开源力量的支持，已经有很多其他的支持语言，比如objc、C#等）。通过将这些类包含在项目中，可以很轻松的调用相关方法来完成业务消息的序列化与反序列化工作。</p>
<p>protobuf在google中是一个比较核心的基础库，作为分布式运算涉及到大量的不同业务消息的传递，如何高效简洁的表示、操作这些业务消息在google这样的大规模应用中是至关重要的。而protobuf这样的库正好是在效率、数据大小、易用性之间取得了很好的平衡。更多详见：<a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="external">protocol-buffers</a></p>
<h3 id="如何使用Protobuf">如何使用Protobuf</h3><p>首先需要在一个 .proto 文件中定义你需要做串行化的数据结构信息。每个ProtocolBuffer信息是一小段逻辑记录，包含一系列的键值对。这里有个非常简单的 .proto 文件定义了个人信息:</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">optional</span> <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span> </span>&#123;</span><br><span class="line"><span class="constant">MOBILE</span> = <span class="number">0</span>;</span><br><span class="line"><span class="constant">HOME</span> = <span class="number">1</span>;</span><br><span class="line"><span class="constant">WORK</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line"><span class="keyword">required</span> <span class="built_in">string</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">optional</span> PhoneType type = <span class="number">2</span> [default = HOME];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">repeated</span> PhoneNumber phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如你所见，消息格式很简单，每个消息类型拥有一个或多个特定的数字字段，每个字段拥有一个名字和一个值类型。值类型可以是数字(整数或浮点)、布尔型、字符串、原始字节或者其他ProtocolBuffer类型，还允许数据结构的分级。你可以指定可选字段，必选字段和重复字段。你可以在<a href="http://code.google.com/apis/protocolbuffers/docs/proto.html" target="_blank" rel="external">这里</a>找到更多关于如何编写 .proto 文件的信息。</p>
<p>一旦你定义了自己的报文格式(message)，你就可以运行ProtocolBuffer编译器，将你的 .proto 文件编译成特定语言的类。这些类提供了简单的方法访问每个字段(像是 query() 和 set_query() )，像是访问类的方法一样将结构串行化或反串行化。例如你可以选择C++语言，运行编译如上的协议文件生成类叫做 Person 。随后你就可以在应用中使用这个类来串行化的读取报文信息。你可以这么写代码:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Person</span> <span class="keyword">person</span>;</span><br><span class="line"><span class="keyword">person</span>.set_name(<span class="string">"John Doe"</span>);</span><br><span class="line"><span class="keyword">person</span>.set_id(1234);</span><br><span class="line"><span class="keyword">person</span>.set_email(<span class="string">"jdoe@example.com"</span>);</span><br><span class="line">fstream.output(<span class="string">"myfile"</span>,ios::out | ios::binary);</span><br><span class="line"><span class="keyword">person</span>.SerializeToOstream(&amp;output);</span><br></pre></td></tr></table></figure>
<p>然后，你可以读取报文中的数据:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fstream input(<span class="string">"myfile"</span>,ios::in | ios:binary);</span><br><span class="line"><span class="keyword">Person</span> <span class="keyword">person</span>;</span><br><span class="line"><span class="keyword">person</span>.ParseFromIstream(&amp;input);</span><br><span class="line">cout &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; <span class="keyword">person</span>.name() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">"E-mail: "</span> &lt;&lt; <span class="keyword">person</span>.email() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>你可以在不影响向后兼容的情况下随意给数据结构增加字段，旧有的数据会忽略新的字段。所以如果使用ProtocolBuffer作为通信协议，你可以无须担心破坏现有代码的情况下扩展协议。</p>
<h3 id="Protobuf有什么缺陷">Protobuf有什么缺陷</h3><ul>
<li><p>二进制格式导致可读性差：为了提高性能，protobuf采用了二进制格式进行编码。这直接导致了可读性差的问题（严格地说，是没有可读性）。虽然protobuf提供了TextFormat这个工具类，但终究无法彻底解决此问题。</p>
</li>
<li><p>缺乏自描述：一般来说，XML是自描述的，而protobuf格式则不是。给你一段二进制格式的协议内容，如果不配合相应的proto文件，那简直就像天书一般。</p>
</li>
<li><p>其他的关于Protobuf:</p>
</li>
</ul>
<p>1、 从某种意义上讲，可以把proto文件看成是描述通讯协议的规格说明书（或者叫接口规范）。我们能从中看到AIDL的影子，它们的思想是相通的。</p>
<p>2、关于“向后兼容”和“向前兼容”：</p>
<p>为了叙述方便，我们把增加了“状态”属性的协议成为“新版本”；之前的叫“老版本”。</p>
<p>所谓的“向后兼容”（backward compatible），就是说，当模块B升级了之后，它能够正确识别模块A发出的老版本的协议。由于老版本没有“状态”这个属性，在扩充协议时，可以考虑把“状态”属性设置成非必填的，或者给“状态”属性设置一个缺省值。</p>
<p>所谓的“向前兼容”（forward compatible），就是说，当模块A升级了之后，模块B能够正常识别模块A发出的新版本的协议。这时候，新增加的“状态”属性会被忽略。</p>
<p>“向后兼容”和“向前兼容”有什么用处呢？举个例子：当你维护一个很庞大的分布式系统时，由于你无法同时升级所有模块，为了保证在升级过程中，整个系统能够尽可能不受影响，就需要尽量保证通讯协议的“向后兼容”或“向前兼容”。</p>
<p>3、跟Protobuf类似的还有thrift，thrift提供了全套RPC解决方案，包括序列化机制、传输层、并发处理框架等，支持的语言更多，功能更丰富，但是学习成本较高。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>在开发中，我们免不了要与服务器进行网络数据交互，而这些数据采用了各种各样的方式，现如今比较流行的是JSON格式，而XML格式因为其解析速度慢、传输数据量较大等性能上的诟病被大家逐渐抛弃了。今天的主角是Protobuf（Protocol ]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
      <category term="iOS" scheme="http://yiqivr.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Android中实现阴影效果]]></title>
    <link href="http://yiqivr.com/2015/03/03/%E5%9C%A8Android%E4%B8%AD%E5%AE%9E%E7%8E%B0%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/"/>
    <id>http://yiqivr.com/2015/03/03/在Android中实现阴影效果/</id>
    <published>2015-03-02T22:52:19.000Z</published>
    <updated>2015-08-04T14:56:53.000Z</updated>
    <content type="html"><![CDATA[<p>在Android L推出后，Google提出了全新的设计语言：材质设计。其中很重要的一点就是阴影效果的使用，你可以为每一个View设置一个<code>elevation</code>值，相当于除了x、y之外的z值，z值决定了阴影的大小，z值越大表示阴影越大。z值包含两个成分：<code>elevation</code>和<code>translation</code>。elevation是一个静态的成分，<code>translation</code>使用了动画：<code>Z = elevation + translationZ</code>。</p>
<p>在layout中设置<code>elevation</code>，使用<code>android:elevation</code>属性。在代码中设置，使用<code>View.setElevation()</code>方法。设置一个View的<code>translation</code>，使用<code>View.setTranslationZ()</code>方法。<code>ViewPropertyAnimator.z()</code>和<code>ViewPropertyAnimator.translationZ()</code>能使你更轻易的推动Views的<code>elevation</code>。</p>
<p>因此，想要在5.0（API 21）以及以后想要设置阴影非常简单我们只需要设置<code>elevation</code>属性就可以了。比如我们想让一张图片显示阴影：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"100dp"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"100dp"</span></span><br><span class="line">   <span class="attribute">android:layout_marginTop</span>=<span class="value">"10dp"</span></span><br><span class="line">   <span class="attribute">android:background</span>=<span class="value">"#fff"</span></span><br><span class="line">   <span class="attribute">android:elevation</span>=<span class="value">"10dp"</span></span><br><span class="line">   <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_launcher"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的一点是：必须要设置<code>background</code>并且不能设置是透明背景，这样在真机上才能显示出来，没有设置的话预览能显示，但是真机并没有效果，在<code>ViewGroup</code>中也是一样。</p>
<p>那我们想在5.0之前也实现阴影效果怎么办呢？有两个办法：第一种是自定义layer-list，第二种办法是使用nine-patch图片。</p>
<p>先来看看nine-patch方案：大概原理就是使用一张边界是阴影效果的.9图片，然后设置为背景，可以让美工帮忙切一张，也可以使用系统自带的，有个叫<code>android:background=&quot;@android:drawable/dialog_holo_light_frame</code>”，设置后的效果就是带阴影的效果。</p>
<p>再来看看layer-list方案，如果我们需要一张矩形的阴影效果，则大概应该这么定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xmlversion="1.0"encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">layer-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Drop Shadow Stack --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                <span class="attribute">android:bottom</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:left</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:right</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:top</span>=<span class="value">"2dp"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#10CCCCCC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                <span class="attribute">android:bottom</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:left</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:right</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:top</span>=<span class="value">"2dp"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#20CCCCCC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                <span class="attribute">android:bottom</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:left</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:right</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:top</span>=<span class="value">"2dp"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#40CCCCCC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                <span class="attribute">android:bottom</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:left</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:right</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:top</span>=<span class="value">"2dp"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#50CCCCCC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                <span class="attribute">android:bottom</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:left</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:right</span>=<span class="value">"2dp"</span></span><br><span class="line">                <span class="attribute">android:top</span>=<span class="value">"2dp"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#60CCCCCC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Background --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#FFFFFF"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">corners</span> <span class="attribute">android:radius</span>=<span class="value">"3dp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原理就是沿着边界一层一层的绘制，颜色由深到浅。</p>
<p>同样，如果需要实现像FAB（Floating ActionBar）一样的阴影效果，也能这么定义，把矩形换做圆形即可：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xmlversion="1.0"encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">selectorxmlns:android="http:</span>//<span class="attribute">schemas.android.com</span>/<span class="attribute">apk</span>/<span class="attribute">res</span>/<span class="attribute">android</span>"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">itemandroid:state_pressed="true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">layer-list</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Shadow --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">itemandroid:top="1dp"android:right="1dp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">layer-list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#08000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"3px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"3px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"3px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"3px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#09000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"2px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#10000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"2px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#11000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#12000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#13000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#14000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#15000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#16000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Blue button pressed --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#90CAF9"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:state_enabled</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">layer-list</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Shadow --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:top</span>=<span class="value">"2dp"</span><span class="value">android:right="1dp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">layer-list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#08000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"4px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"4px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"4px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"4px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#09000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"2px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#10000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"2px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"2px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#11000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#12000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#13000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#14000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#15000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#16000000"</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">padding</span></span><br><span class="line">                                <span class="attribute">android:bottom</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:left</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:right</span>=<span class="value">"1px"</span></span><br><span class="line">                                <span class="attribute">android:top</span>=<span class="value">"1px"</span></span><br><span class="line">                                /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Blue button --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">shape</span> <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#03A9F4"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就能实现通用平台的阴影效果了，还有一点不要被迷惑了，support-v4里面有个<code>ViewCompat.setElevation(iv, 2.0f);</code>方法，试验证明是没用的。</p>
<p>更多的学习大家可以参考API DEMO的<code>ShadowCardDrag</code>和<code>ShadowCardStack</code>两个Demo。</p>
<p>最后来看看实现的效果图：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQUyYk71/SsTq7.png" alt=""></p>
<p>第一个是使用的.9背景图片，也就是之前提到的属性，第二个和第三个是使用的layer-list，最后一个是使用的elevation属性。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android L推出后，Google提出了全新的设计语言：材质设计。其中很重要的一点就是阴影效果的使用，你可以为每一个View设置一个<code>elevation</code>值，相当于除了x、y之外的z值，z值决定了阴影的大小，z值越大表示阴影越大。z值包含两个成分]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抓包百度云、115、360网盘真实地址]]></title>
    <link href="http://yiqivr.com/2015/02/02/%E6%8A%93%E5%8C%85%E7%99%BE%E5%BA%A6%E4%BA%91%E3%80%81115%E3%80%81360%E7%BD%91%E7%9B%98%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80/"/>
    <id>http://yiqivr.com/2015/02/02/抓包百度云、115、360网盘真实地址/</id>
    <published>2015-02-02T00:39:02.000Z</published>
    <updated>2015-08-04T15:16:08.000Z</updated>
    <content type="html"><![CDATA[<p>三大网盘都试验了，原理都差不多，主要是加密方式不同，下面以百度云为例简单说明记录：</p>
<h3 id="工具">工具</h3><p>Safari+Charles</p>
<p>主要用到Safari的右键-审查元素功能，能查看到网页的源代码和JS代码。</p>
<p>而Charles是抓包工具，能看到发出去的GET/POST请求头部、参数等各种信息。</p>
<h3 id="获取真实下载地址">获取真实下载地址</h3><p>登陆和获取列表比较简单就不说了，通过上面的工具能很方便的得到。</p>
<p>这是百度云获取下载地址的JS代码，可以看到是POST请求，需要传递四个参数，分别是<strong>sign</strong>、<strong>timestamp</strong>、<strong>fidlist</strong>、<strong>type</strong>。</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQUfW2It/eAXYI.png" alt=""></p>
<p>主要是看sign，这儿是sign的加密代码：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQUfW05P/QvoP3.png" alt=""></p>
<p>就直接放在了文件主页的头部JS代码里面，压缩过了比较不好看，我转换写成了Java代码：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQUfWFj5/lnSV0.png" alt=""></p>
<p>一开始把subStr理解成了subString，所以耽误了点时间，好吧，反正最后还是检查出来了。</p>
<p>还有百度云的专属Base64编码，大家也可以用自己的：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQUfWVcM/3EEvU.png" alt=""></p>
<p>得到了sign就OK了，往地址 <strong><a href="http://pan.baidu.com/api/download" target="_blank" rel="external">http://pan.baidu.com/api/download</a></strong> POST之前说的四个参数，再加上登陆成功后的Cookie：BDUSS，就能返回真实的下载地址了。</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQUfXatT/dEiRF.png" alt=""></p>
<p>见图，那个dlink就是我们想要的了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>三大网盘都试验了，原理都差不多，主要是加密方式不同，下面以百度云为例简单说明记录：</p>
<h3 id="工具">工具</h3><p>Safari+Charles</p>
<p>主要用到Safari的右键-审查元素功能，能查看到网页的源代码和JS代码。</p>
<p>而C]]>
    </summary>
    
      <category term="Web" scheme="http://yiqivr.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Vim一些不常用的36个小技巧]]></title>
    <link href="http://yiqivr.com/2015/01/30/%E5%85%B3%E4%BA%8EVim%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%8436%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yiqivr.com/2015/01/30/关于Vim一些不常用的36个小技巧/</id>
    <published>2015-01-29T23:56:43.000Z</published>
    <updated>2015-08-04T14:00:12.000Z</updated>
    <content type="html"><![CDATA[<p>无聊通读了一遍Vim用户手册，摘取出了一些不常用但是很方便的小技巧，记录在此。</p>
<ol>
<li><p>删除换行符，命令是”J”。</p>
</li>
<li><p>像”w”有一个反方向的命令”b”一样，”e”的反方向命令是”ge”，它将光标移到前一个word的最后一个字符上。</p>
</li>
<li><p>“$”命令还可接受一个计数，就象其它的移动命令一样。但是移动到一行的行尾多于一次没有任何意义。所以它的功能被赋予为移动到下一行的行尾。如”1$”会将光标移动到当前行行尾，”2$”则会移动到下一行的行尾，如此类推。</p>
</li>
<li><p>“tx”命令形同”fx”命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示：”t”意为”To”。该命令的反方向版是”Tx”。</p>
</li>
<li><p>“H”意为Home, “M”为Middle, “L”为Last，可以移动到目前显示在屏幕上的第一行、中间那行和最后一行。</p>
</li>
<li><p>CTRL-U命令会使文本向下滚动半屏，也可以想象为在显示文本的窗口向上滚动了半屏。CTRL-D命令将窗口向下移动半屏，所以相当于文本向上滚动了半屏。要一次滚动一行可以使用CTRL-E(向上滚动)和CTRL-Y(向下滚动)。 提示:CTRL-E 意为Extra。要向前滚动一整屏(实际上是整屏去两行)使用命令CTRL-F，另外CTRL-B是它的反向版。很幸运CTRL-F是向前1，CTRL-B是向后2，好记吧！一个经常遇到的问题是你用”j”命令向下移动了若干行后当前光标已经处于屏幕的底端了。而你又想查看当前行前后的几行内容。”zz”命令会把当前行置为屏幕正中央，”zt”命令会把当前行置于屏幕顶端，”zb”则把当前行置于屏幕底端。</p>
</li>
<li><p>把光标定位于这个word上，然后按下“<em>”键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。”#”命令是”</em>“的反向版。还可以在这两个命令前加一个命令计数：”3*”查找当前光标下的word的第三次出现。</p>
</li>
<li><p>“\&gt;\”是一个特殊的记法，它只匹配一个word的结束处。近似地，”\&lt;\”匹 配到一个word的开始处。这样查找作为一个word的”the”就可以用:\<the\\>，这个命令就不会匹配到”there”或”soothe”。</the\\></p>
</li>
<li><p>^字符匹配一行的开头。象”include”这样的模式可以匹配出现在一行中任何位置的include这个单词。但是模式”^include”就只匹配出现在一行开头的include，$字符匹配一行的末尾，所以”was$”只匹配位于一行末尾的单词was。</p>
</li>
<li><p>当你用”G”命令（包括”/“和”n”这些搜索命令，但是字符搜索命令”fx”和”tx”，或者是以word为单位的移动光标位置的命令”w”和”e”不叫跳转。同时，”j”和”k”命令并不被视为一个跳转，即使你在它们之前加了命令计数让当前光标跳到老远的地方也是如此）从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用``命令可以使你跳回到你刚才的出发点，再次使用上面的这个命令你就会又跳回来了。这是因为`也是一个跳 转命令，所以上次跳转时的起跳位置现在被标记为了`。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older)， CTRL-I则是跳回到后来停置光标的更新的位置(提示:I在键盘上位于O前面)。</p>
</li>
<li><p>Vim允许你在文本中定义你自己的标记。命令”ma”将当前光标下的位置名之为标记”a”。从a到z一共可以使用26个自定义的标记。定义后的标记在屏幕上也看不出来。不过Vim在内部记录了它们所代表的位置。要跳转到一个你定义过的标记，使用命令`{mark}，{mark}就是你定义的标记的名字。就象`a。命令’mark(单引号，或者叫呼应单引号)会使你跳转到mark所在行的行首。这与`mark略有不同，`mark会精准地把你带到你定义mark时所在的行和列。标记对于编辑那些有两块内容相互关联的文件十分有用。想象一下你在文件开头有一段文字需要时时参考，但实际上要修改编辑的地方却在文件结尾处的情形。</p>
</li>
<li><p>就象”dd”命令可以删除整行一样，”cc”命令可以改变整行。不过仍保持原来的缩进(一行打头的空白)，也正如”d$”删除到行尾为止的内容，”c$”改变当前光标到行尾的内容。就好象是用”d$”删除然后又以”a”进入Insert模式追加新的文本一样。</p>
</li>
<li><p>有一些操作符+位移命令使用率是如此之高以至于它们以一个单独的字符作为其快捷方式：x代表dl(删除当前光标下的字符)，X代表dh(删除当前光标左边的字符)，D代表d$(删除到行尾的内容)，C 代表c$(修改到行尾的内容)，s代表cl(修改一个字符)，S 代表cc(修改一整行)。</p>
</li>
<li><p>要把一个字符替换为一个换行符使用”r<enter>“。它会删除一个字符并插入一个换行符。但在此处使用命令记数只会删除指定个数的字符:”4r&lt;Enter&gt;”将把4个字符替换为一个换行符。</enter></p>
</li>
<li><p>“.”命令是Vim中一个简单而强大的命令。它会重复上一次做出的改动。例如，假设你在编辑一个HTML文件，想删除其中所有的&lt;B&gt;标签。你把光标置于&lt;B&gt;的&lt;字符上然后命令”df&gt;”。然后到&lt;/B&gt;的&lt;上用”.”命令做同样的事。”.”命令会执行上一次所执行的更改命令(此例中是”df&gt;\”)。 要删除另一个标签，同样把光标置于&lt;字符上然后执行”.”命令即可。</p>
</li>
<li><p>如果你想整行整行地操纵文本，使用”V”进入Visual模式。你会看到被选中的文本是是一整行一整行为单位。命令左右移动命令毫无意义。而上下位移命令则会整行整行地选择文本。如果你想以一个矩形的文本块为对象进行操作，你需要用CTRL-V进入Visual模式。在编辑表格时这可就派上用场了。</p>
</li>
<li><p>如果你已经在Visual模式下选中了一些文本，但此时发现还要改变另一头的被选择区域，”o”命令(提示:o代表other end另一头)会让光标置于被选中文本的另一头，这样你就可以通过控制光标移动来决定被选文本将从何处开始。再按”o”又会让光标置于被选文本的末端。当你进行矩形文本块内容的选择时，你有4个角都可以改变。”o”只会把你带到对角的位置去，使用”O”命令可以让你在同一行的左右两个角之间移动 。注意”o”和”O”在Visual模式与Normal模式下行为迥异，在Normal模式下它们是在当前行的下面或上面插入一个新行。</p>
</li>
<li><p>“P”命令与”p”一样取回被删除的内容，不过它把被取回的内容置于光标之前。对于以”dd”删除的整行内容，”P”会把它置于当前行的上一行。对于以”dw”删除的部分内容，”P”会把它放回到光标之前。你可以多次取回被删除的内容。其内容取之不竭。也可以对命令”p”和”P”命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来”dd”之后的”3p”就可以把被删除行的3份副本放到当前位置。</p>
</li>
<li><p>输入文本的时候，人们常常会发现手比脑跑得要快(或者脑比手跑得快)。不管谁更快结果都是拼错字，比如把”the”拼成”teh”。在Vim中改正此类错误十分容易，把光标置于”teh”的e上执行命令”xp”。它的工作如下:”x”删除字符e并把它放入一个寄存器中。”p”命令把被删除的e再放回到当前光标之后，也就是h后面。</p>
</li>
<li><p>把一行内容复制到剪贴板:”<em>yy，要把剪贴板的内容复制过来:”</em>p。</p>
</li>
<li><p>“daw”中的”d”还是操作符命令。”aw”是一个文本对象。提示:”aw”意为”A Word”。这样”daw”的完整意思是”Delete A Word”，更准确地说，该Word之后的空白字符也被删除了(即位于行末尾的单词之前的空白)。</p>
</li>
<li><p>“cis”由操作符”c”和文本对象”is”组成。它是”Inner Sentence”的缩写。相应地还有一个叫”as”(a sentence)的。如果你想删除一个句子, 你会希望把它后面的空白也给删除，所以此时最好用”das”。如果你是想以新的文本替代它，空白就可以留下来，使用”cis”好了。你也可以在Visual模式使用文本对象。它将把指定的文本对象选 进Visual模式的文本选择区域中。当前模式仍是Visual模式，所以你可以多次使用该命令。例如，以”v”开始Visual模式，以”as”选取一个句子。 现在你可以重复使用”as”来包括进更多的句子。最后你可以用一个操作符命令来作用于最终被选中的范围。</p>
</li>
<li><p>通常情况下Vim不会生成备份文件。如果你需要的话，只需要执行命令:”:set backup”。生成的备份文件名将是原文件名后面附加一个~。如果原文件是data.txt，则生成的备份文件是data.txt~。如果你不喜欢这个默认的备份文件名后辍，你可以用下面的命令重新指定一个:”:set backupext=.bak”。这将会生成一个名为data.txt.bak的备份文件。</p>
</li>
<li><p>要把多行文本收集到一起写入一个文件，可以用:write &gt;&gt; logfile命令。这将会把当前文件的内容追加到文件”logfile”。这样做避免了你使用前面的方法去复制内容，编辑log文件。这样可以省去两个环节。但它的局限是只能在文件的最后追加内容。要想只追加几行的内容到文件中去，可以在使用命令”:write”之前先在Visual模式下选定要写入的内容。</p>
</li>
<li><p>命令vim -R file以只读方式运行Vim，如果你改动了该文件但忘了它是只读的，你还是可以保存该文件。在”:write”命令之后使用!强制执行修饰符。如果是想强制性地避免对文件进行修改，可以用命令vim -M file，这样每个修改文件的尝试都会失败。帮助文件就是这样。:set modifiable，:set write命令还是可以去掉这层保护。</p>
</li>
<li><p>“.”命令可以重复最近一次的编辑动作。但是如果你要做的操作远比这些小儿科复杂呢？那就是Vim为什么要引入命令记录的原因。使用命令记录分三个步骤：1、使 用”q{register}”命令开始，后续的动作将被记录进名为{register}的寄存器中。给出的寄存器名字必需是a到z之间的一个字母。2、执行你要执行的操作。3、按下q以结束对命令的记录(注意仅仅是q一个字符，不要键入多余的字符)。现在你可以通过”@{recording}”命令来执行刚刚记录下来的记录宏了。对其它要执行3次”@”命令，”@”命令也可以加一个数字前辍如：3@a。</p>
</li>
<li><p>也许实际情况是你在几个不同的地方要执行这些操作(而不象上例中是连续的4行)。这只需要你将光标定位到目标行，然后再执行”@a”命令。如果已经执行过”@a”命令，下次重复执行只需再下”@@”即可。这比”@a”更容易键入。同样，如果你上次执行的是”@b”那么”@@”命令也将重复”@b”的动作。与”.”方法相比，记录回放有几个地方不同，首先，”.”命令只能重复一个动作。而在上例中，”@a”重复的是好几个命令，其次，”.”命令只重复最近一次改动的命令。而执行一个记录宏允许你随时都可执行同样的操作。最后，你拥有多达26个寄存器可供使用。也就是说，可以同时保存26个不同的命令宏。</p>
</li>
<li><p>目前为止我们用到的还都是小写字母的寄存器。要向寄存器追加内容而不是覆盖它，使用它的大写形式即可。假设你已经记录了一个改变word的命令在寄存器c中。它已经可以正常工作，但你又想让它搜索到下一个word继续编辑。可以使用下面的命令qC/word&lt;Enter&gt;q。以”qC”命令开始，这使得被记录的命令将被追加到寄存器c中，而不是覆盖它当前的内容。这种方式对命令记录和一般的yank，删除操作都有效。比如你要把几行的内容收集到一个寄存器中去，以小写来yank第一行”aY，现在移动到第二行，执行”AY，对你要收集的行重复执行这个操作。现在寄存器a就会包括所有这些 行的内容。</p>
</li>
<li><p>:.,$s/yes/no/命令替换当前行到最后一行中所有的yes为no。</p>
</li>
<li><p>命令”Istring&lt;Esc&gt;”会在每行中插入相同的文本，插入位置在被选择块的左边。具体过程是以CTRL-V进入Visual block模式。然后移动光标来调整被选择的区域。接下来键入I命令进入插入模式，键入你要插入的文本。在你键入文本的过程中，被键入的内容只会同时显示在文本块的第一行中。一旦你按下&lt;Esc&gt;来结束插入，刚刚键入的内容就会奇迹般地出现在被选择文本块的每一行中。”A”命令类似于”I”，只不过它是在文本块的最右边追加文本。</p>
</li>
<li><p>Visual block模式下的”c”命令会删除被选择的文本块，然后你会身处Insert模式，键入改变后的内容。”C”命令会删除文本块最左边至每一行末尾的所有内容。”r”将使整个文本块的内容全部以一个字符来填充。</p>
</li>
<li><p>Visual block模式下还有其它一些改变文本内容的命令：~交换大小写 (a -&gt; A, A -&gt; a)、U将小写变大写 (a-&gt;A,A-&gt;A)、u将大写变小写 (a-&gt;a,A-&gt;a)。</p>
</li>
<li><p>Visual block模式下”&gt;”命令会使你的文本块向右移动一个”shift 单位”，空出来的部分放置以空格。被移动的区域始自文本块左边界。移动的多寡由选项’shiftwidth’指定。欲使之移动4个空格:set shiftwidth=4。”&lt;”命令使文本块向左移动一个”shift单位”。不过它不象”&gt;”一样姿意，它受限于文本块左边的空间，所以如果文本块左边的空白区域短于一个”shift单位”，它也无能为力。</p>
</li>
<li><p>gqap命令告诉Vim格式化你的当前文本段。该命令以\”gq”开始，这是Vim中的一个操作符。接下来是”ap”，它代表”a paragraph”这样一个文本对象，文本段与文本段之间的分隔标志是一个空行。gggqG命令来格式化整个文件。”gg”会首先定位到第一行，然后”gq”告诉Vim要格式文本了，”G”移动 操作符跳转到最后一行，连起来的意思就是格式化整个文件。</p>
</li>
<li><p>你可能只想替换那些出现在注释中的”four”，代码中的留下。”c”标志可以让每个目标被替换之前询问你的意见:%s/&lt;four&gt;/4/gc。</p>
</li>
<li><p>键入命令’0你就会准确地回到你上次退出时的位置。每次退出Vim时它都会创建一个特殊的标记。最后的一个是’0。上次的’0现在会变成’1，原来的’1成了’2，如此类推，原来的’9就丢掉了。|:marks|命令可用来找出这些从’0到’9的标记都指向哪里。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>无聊通读了一遍Vim用户手册，摘取出了一些不常用但是很方便的小技巧，记录在此。</p>
<ol>
<li><p>删除换行符，命令是”J”。</p>
</li>
<li><p>像”w”有一个反方向的命令”b”一样，”e”的反方向命令是”ge”，它将光标移到前一个word的最后]]>
    </summary>
    
      <category term="Vim" scheme="http://yiqivr.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[惊艳！在Android/iOS开发中使用IconFont]]></title>
    <link href="http://yiqivr.com/2015/01/21/%E6%83%8A%E8%89%B3%EF%BC%81%E5%9C%A8Android-iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8IconFont/"/>
    <id>http://yiqivr.com/2015/01/21/惊艳！在Android-iOS开发中使用IconFont/</id>
    <published>2015-01-20T19:19:52.000Z</published>
    <updated>2015-08-04T15:14:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="引言">引言</h3><p>本人是图标控、应用控。图标好看的、应用设计漂亮的，即使不用我也不会卸载它，给它在我的机机上留上一席之地，偶尔打开过过瘾。之前使用过一款叫做Radium的iOS APP，是一款收音机应用，给我留下了十足深刻的印象，不为别的，就是因为设计的非常漂亮，以致我现在也在Mac平台上继续使用它。多说无用，先给大家看看几张截图：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EQTTjHv3/FAyy5.jpg" alt=""></p>
<p>这三张图都是同一个界面，列表背景色是专辑封面的主色，列表标题色是专辑封面第二主色，按下列表后列表背景色和标题色互换。这还不本文的重点，大家注意到列表的图标了吗？进入不同的专辑，界面中的每个图标的颜色居然也是不一样的，也是根据专辑的封面主色而定的！真是惊艳！</p>
<p>接下来我们就要思考了：</p>
<ul>
<li>获取专辑封面主色、第二主色这是如何实现的呢？</li>
<li>如何动态的改变页面中图标的颜色？</li>
</ul>
<p>关于第一个问题，比较简单，我想大多数朋友都和我想的一样，就是获取到bitmap的宽高，然后两个for循环取每个像素点的色值存到集合中。最后集合中最多的就是主色，第二多的就是第二主色，第三、第四依次类推。</p>
<p>主要是第二个问题，我想到了5种可能（头脑风暴，不管能不能实现，先列举出来）：</p>
<ol>
<li>使用paint（iOS中使用Quartz2D）来一个一个绘制，然后留出改变颜色的接口来动态改变。</li>
<li>使用HTML5，我们在很多H5的网页中看到的图标也是能动态改变颜色的。</li>
<li>使用svg。</li>
<li>使用多套图方案。</li>
<li>使用IconFont。</li>
</ol>
<p>关于第一种设想，非常麻烦，一个稍微复杂点的图标绘制出来可能都要花上半天的时间，说白了都是体力活。</p>
<p>第二种可能，Radium页面中又许多流畅而且华丽的动画，应该不是H5开发的，并且我们现在考虑的是如何在本地应用中实现，so，out！</p>
<p>第三种，要使用svg，首先得保证你的Android设备得高于于2.3，因为Android 2.3不支持SVG格式，并且目前2.3还是有10%左右份额的。</p>
<p>第四种，我们是摸不清下一个专辑封面是张什么样的啊，太繁琐了而且大大增加了客户端的体积。</p>
<p>看来只剩下第五种可能了…</p>
<h3 id="什么是iconfont">什么是iconfont</h3><p>利用字体工具把我们平时 Web 上用的图形图标（icons）转换成 web fonts，就成了 icon fonts，它可以借助 CSS 的 @font-face 嵌入到网页里，用以显示 icons。因为字体是矢量化图形，它天生具有「分辨率无关」的特性，在任何分辨率和PPI下面，都可以做到完美缩放，不会像传统位图，如：png，jpeg，放大后有锯齿或模糊现象。</p>
<h3 id="它有什么优点">它有什么优点</h3><ul>
<li><strong>文件小</strong>：相比图片几十几百KB的容量，icon fonts 几乎是羽翼级轻量。</li>
<li><strong>加载性能好</strong>：因为图标都被打包进一套字体内，http request 减少。这如同我们常用的 css sprites 技术。</li>
<li><strong>支持CSS样式</strong>：和普通字体一样，你可以利用CSS来定义大小、颜色、阴影、hover状态、透明度、渐变等等…</li>
<li><strong>兼容性好</strong>：web fonts 起源很早，别说主流浏览器，连IE6/7都能良好支持。除了一些老的移动端浏览器，如Android 2.1以下的初代浏览器，Opera mini 这类自限型浏览器。</li>
</ul>
<p><strong>缺点：只支持纯色icon。</strong></p>
<p>为了能有个直观的印象，大家可以去<a href="http://css-tricks.com/examples/IconFont/" target="_blank" rel="external">IconFont测试</a>简单拖动滑块测试下改变每个属性（比如颜色、阴影等）的时候图标会变成什么样。</p>
<h3 id="素材">素材</h3><p>在我们国内，比较好的矢量图标库有：<a href="http://www.iconfont.cn/" target="_blank" rel="external">阿里巴巴矢量图标库</a>。</p>
<p>在国外有<a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="external">Font Awesome</a>。</p>
<h3 id="实现">实现</h3><p>github上已经有大牛实现了，<a href="https://github.com/JoanZapata/android-iconify" target="_blank" rel="external">时光隧道</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="引言">引言</h3><p>本人是图标控、应用控。图标好看的、应用设计漂亮的，即使不用我也不会卸载它，给它在我的机机上留上一席之地，偶尔打开过过瘾。之前使用过一款叫做Radium的iOS APP，是一款收音机应用，给我留下了十足深刻的印象，不为别的，就是因为设计的]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
      <category term="iOS" scheme="http://yiqivr.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用CardView实现卡片式Google Plus布局]]></title>
    <link href="http://yiqivr.com/2015/01/14/%E4%BD%BF%E7%94%A8CardView%E5%AE%9E%E7%8E%B0%E5%8D%A1%E7%89%87%E5%BC%8FGoogle-Plus%E5%B8%83%E5%B1%80/"/>
    <id>http://yiqivr.com/2015/01/14/使用CardView实现卡片式Google-Plus布局/</id>
    <published>2015-01-13T23:37:11.000Z</published>
    <updated>2015-08-04T10:39:38.000Z</updated>
    <content type="html"><![CDATA[<p>经常使用Google APP的人应该对卡片式设计非常熟悉了吧，不管是Google Now、Google Email、Google+等都沿用了卡片式设计的风格，非常清新明了，感觉没有任何冗余的信息。</p>
<p>那么我们在Android开发中如何采用这种设计呢？其实在android.support.v7包中Android已经为我们提供了卡片式设计的视图，名字就叫做CardView。CardView使用起来也是非常的简单，当你想把一个视图作为一个卡片式视图的话，你就用CardView包裹它就行了，因为CardView是从FrameLayout派生来的。</p>
<p>接下来我们写一个小Demo来模仿Google Plus的布局设计，并且给每个卡片添加上从下往上弹出的动画。</p>
<p>再来看看代码如何实现吧：</p>
<p><em>card_item.xml</em></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xmlversion="1.0"encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.CardViewxmlns:android="http:</span>//<span class="attribute">schemas.android.com</span>/<span class="attribute">apk</span>/<span class="attribute">res</span>/<span class="attribute">android</span>"</span><br><span class="line"><span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line"><span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line"><span class="attribute">app:cardCornerRadius</span>=<span class="value">"3dp"</span></span><br><span class="line"><span class="attribute">app:cardElevation</span>=<span class="value">"3dp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line"><span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line"><span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line"><span class="attribute">android:id</span>=<span class="value">"@+id/iv"</span></span><br><span class="line"><span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line"><span class="attribute">android:layout_height</span>=<span class="value">"230dp"</span></span><br><span class="line"><span class="attribute">android:scaleType</span>=<span class="value">"centerCrop"</span></span><br><span class="line"><span class="attribute">android:src</span>=<span class="value">"@drawable/ic_launcher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line"><span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line"><span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line"><span class="attribute">android:layout_alignBottom</span>=<span class="value">"@id/iv"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line"><span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line"><span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line"><span class="attribute">android:gravity</span>=<span class="value">"center_vertical"</span></span><br><span class="line"><span class="attribute">android:paddingBottom</span>=<span class="value">"3dp"</span></span><br><span class="line"><span class="attribute">android:paddingLeft</span>=<span class="value">"8dp"</span></span><br><span class="line"><span class="attribute">android:paddingRight</span>=<span class="value">"8dp"</span></span><br><span class="line"><span class="attribute">android:paddingTop</span>=<span class="value">"3dp"</span></span><br><span class="line"><span class="attribute">android:text</span>=<span class="value">"Support android.widget classes to assist with development of applications for android API le</span><br><span class="line">android:textSize="</span><span class="value">15sp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.v7.widget.CardView</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意到最外层的布局了吗，我们使用的正是CardView样式。在这儿我们分别使用了两个属性，分别是cardCornerRadius和cardElevation，分别代表圆角和海拔（设置越大卡片显示的越突出）。还有其他的什么属性能够设置呢，看看源码的attr.xml：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;declare-styleablename=<span class="string">"CardView"</span>&gt;</span><br><span class="line">&lt;attrname=<span class="string">"cardBackgroundColor"</span><span class="built_in">format</span>=<span class="string">"color"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"cardCornerRadius"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"cardElevation"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"cardMaxElevation"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"cardUseCompatPadding"</span><span class="built_in">format</span>=<span class="string">"boolean"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"cardPreventCornerOverlap"</span><span class="built_in">format</span>=<span class="string">"boolean"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"contentPadding"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"contentPaddingLeft"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"contentPaddingRight"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"contentPaddingTop"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;attrname=<span class="string">"contentPaddingBottom"</span><span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到除了我们用到的两个属性，还可以设置padding等。接下来在看看模仿Google Plus动画该如何实现，这部分应该在每个CardView出现的时候开始动画，也就是说应该在Adapter里面实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> CardAdapter extends BaseAdapter &#123;</span><br><span class="line">privatestaticfinallongANIM_DEFAULT_SPEED = <span class="number">500L</span>;</span><br><span class="line"><span class="keyword">private</span> Interpolator interpolator;</span><br><span class="line"><span class="keyword">private</span> SparseBooleanArray positionsMapper;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;? extends Object&gt; items;</span><br><span class="line">privateintheight, previousPostition;</span><br><span class="line">privatelonganimDuration;</span><br><span class="line"><span class="keyword">private</span> View v;</span><br><span class="line"><span class="keyword">private</span> Context context;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">CardAdapter</span><span class="params">(Context context, ArrayList&lt;? extends Object&gt; items)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.context = context;</span><br><span class="line"><span class="keyword">this</span>.items = items;</span><br><span class="line">previousPostition = -<span class="number">1</span>;</span><br><span class="line">positionsMapper = <span class="keyword">new</span> SparseBooleanArray(getCount());</span><br><span class="line">WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">height = windowManager.getDefaultDisplay().getHeight() / <span class="number">2</span>;</span><br><span class="line">interpolator = <span class="keyword">new</span> AccelerateDecelerateInterpolator();</span><br><span class="line">&#125;</span><br><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.size();</span><br><span class="line">&#125;</span><br><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items.get(position);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="function">Override</span><br><span class="line"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">v = LayoutInflater.from(context).inflate(R.layout.card_item, null);</span><br><span class="line"><span class="comment">// TODO 填充内容</span></span><br><span class="line"><span class="comment">// Google plus动画</span></span><br><span class="line"><span class="keyword">if</span> (v != null &amp;&amp; !positionsMapper.get(position) &amp;&amp; position &gt; previousPostition) &#123;</span><br><span class="line">animDuration = ANIM_DEFAULT_SPEED;</span><br><span class="line">previousPostition = position;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">v.setTranslationX(<span class="number">0.0F</span>);</span><br><span class="line">v.setTranslationY(height);</span><br><span class="line">v.setRotationX(<span class="number">12.0F</span>);</span><br><span class="line">v.setScaleX(<span class="number">0.7F</span>);</span><br><span class="line">v.setScaleY(<span class="number">0.6F</span>);</span><br><span class="line"><span class="comment">// 开始动画至正常显示</span></span><br><span class="line">v.animate().rotationX(<span class="number">0.0F</span>).rotationY(<span class="number">0.0F</span>).translationX(<span class="number">0</span>).translationY(<span class="number">0</span>).setDuration(animDuration)</span><br><span class="line">.scaleX(<span class="number">1.0F</span>).scaleY(<span class="number">1.0F</span>).setInterpolator(interpolator);</span><br><span class="line"><span class="comment">// 只执行一次动画</span></span><br><span class="line">positionsMapper.put(position, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">returnv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就实现了类似Google+的动画了。最后就是最简单的调用了：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">FragmentActivity</span> &#123;</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(<span class="type">R</span>.layout.activity_main);</span><br><span class="line"><span class="type">ListView</span> list = (<span class="type">ListView</span>) findViewById(<span class="type">R</span>.id.listview);</span><br><span class="line"><span class="type">ArrayList</span>&lt;<span class="type">Object</span>&gt; items = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="type">Object</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) &#123;</span><br><span class="line">items.add(<span class="keyword">new</span> <span class="type">Object</span>());</span><br><span class="line">&#125;</span><br><span class="line">list.setAdapter(<span class="keyword">new</span> <span class="type">CardAdapter</span>(<span class="keyword">this</span>, items));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，一个类似Google+的Demo我们就完成了，当然我们这儿使用的是最简单的ListView，大家可以自己实现其他的效果，比如类似瀑布流等等效果。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经常使用Google APP的人应该对卡片式设计非常熟悉了吧，不管是Google Now、Google Email、Google+等都沿用了卡片式设计的风格，非常清新明了，感觉没有任何冗余的信息。</p>
<p>那么我们在Android开发中如何采用这种设计呢？其实在and]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Volley网络请求源码解析——击溃6大疑虑（二）]]></title>
    <link href="http://yiqivr.com/2015/01/08/Volley%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94%E5%87%BB%E6%BA%836%E5%A4%A7%E7%96%91%E8%99%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yiqivr.com/2015/01/08/Volley网络请求源码解析——击溃6大疑虑（二）/</id>
    <published>2015-01-08T02:07:42.000Z</published>
    <updated>2015-08-04T15:16:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="关于Volley的缓存？">关于Volley的缓存？</h3><p>缓存，Volley是通过Response中的Header来设置缓存记录的生命周期的，主要体现在HttpHeaderParser.java文件的parseCacheHeaders()方法中。所以如果后台没有返回cache-control一系列信息的话，我们每次请求其实都是去网络重新请求的，因为Cache.Entry中的ttl（控制缓存存在于磁盘的时间）、softTtl（控制缓存后台刷新时间）属性都是默认的0。如果我们不想要后台来控制怎么办呢？看来我们得需要自己来实现一个类似parseCacheHeaders()的方法，比如：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Extracts a &#123;@link Cache.Entry&#125; from a &#123;@link NetworkResponse&#125;.</span><br><span class="line"> * Cache-control headers are ignored. SoftTtl == 3 mins, ttl == 24 hours.</span><br><span class="line"> * @param response The network response to parse headers from</span><br><span class="line"> * @return a cache entry for the given response, or null if the response is not cacheable.</span><br><span class="line"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Cache.Entry parseIgnoreCacheHeaders(NetworkResponse response) &#123;</span><br><span class="line"> <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"> Map&amp;lt;<span class="keyword">String</span>, <span class="keyword">String</span>&amp;gt; headers = response.headers;</span><br><span class="line"> <span class="keyword">long</span> serverDate = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">String</span> serverEtag = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">String</span> headerValue;</span><br><span class="line"> headerValue = headers.<span class="built_in">get</span>(<span class="string">"Date"</span>);</span><br><span class="line"> <span class="keyword">if</span> (headerValue != <span class="keyword">null</span>) &#123;</span><br><span class="line"> serverDate = HttpHeaderParser.parseDateAsEpoch(headerValue);</span><br><span class="line"> &#125;</span><br><span class="line"> serverEtag = headers.<span class="built_in">get</span>(<span class="string">"ETag"</span>);</span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">long</span> cacheHitButRefreshed = <span class="number">3</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// in 3 minutes cache will be hit, but also refreshed on background</span></span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">long</span> cacheExpired = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// in 24 hours this cache entry expires completely</span></span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">long</span> softExpire = now + cacheHitButRefreshed;</span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">long</span> ttl = now + cacheExpired;</span><br><span class="line"> Cache.Entry entry = <span class="keyword">new</span> Cache.Entry();</span><br><span class="line"> entry.data = response.data;</span><br><span class="line"> entry.etag = serverEtag;</span><br><span class="line"> entry.softTtl = softExpire;</span><br><span class="line"> entry.ttl = ttl;</span><br><span class="line"> entry.serverDate = serverDate;</span><br><span class="line"> entry.responseHeaders = headers;</span><br><span class="line"> <span class="keyword">return</span> entry;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> 然后使用的时候：</p>
 <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">com</span>.<span class="title">android</span>.<span class="title">volley</span>.<span class="title">Request&lt;MyResponse&gt;</span> &#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">Response</span>&lt;<span class="type">MyResponse</span>&gt; parseNetworkResponse(<span class="type">NetworkResponse</span> response) &#123;</span><br><span class="line"><span class="type">String</span> jsonString = <span class="keyword">new</span> <span class="type">String</span>(response.data);</span><br><span class="line"><span class="type">MyResponse</span> <span class="type">MyResponse</span> = gson.fromJson(jsonString, <span class="type">MyResponse</span>.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="type">Response</span>.success(<span class="type">MyResponse</span>, <span class="type">HttpHeaderParser</span>.parseIgnoreCacheHeaders(response));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话我们就固定了缓存策略，如果在3分钟内获取到缓存，后台会自动刷新缓存，缓存在24小时后将被自动清除。</p>
<h3 id="如何自动清除Volley特定请求的缓存？">如何自动清除Volley特定请求的缓存？</h3><p>首先，要清除Volley的特定的缓存，主要是两个方法：public void invalidate(String key, boolean fullExpire);和public void remove(String key);remove方法代表彻底移除该条缓存记录，invalidate表示将ttl和softy属性都置0，接下来我们还可以得到获取到数据时的时间：Cache.Entry.SeverDate;有了这些条件，我们就可以定义两个方法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getMinutesDifference</span><span class="params">(<span class="keyword">long</span> timeStart,<span class="keyword">long</span> timeStop)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> diff = timeStop - timeStart;</span><br><span class="line"><span class="keyword">long</span> diffMinutes = diff / (<span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">return</span> diffMinutes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后调用就OK了：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance<span class="params">()</span>;</span><br><span class="line">long serverDate = AppController.getInstance<span class="params">()</span>.getRequestQueue<span class="params">()</span>.getCache<span class="params">()</span>.get<span class="params">(url)</span>.serverDate;</span><br><span class="line"><span class="keyword">if</span><span class="params">(getMinutesDifference<span class="params">(serverDate, calendar.getTimeInMillis<span class="params">()</span>)</span> &gt;=<span class="number">30</span>)</span>&#123;</span><br><span class="line">AppController.getInstance<span class="params">()</span>.getRequestQueue<span class="params">()</span>.getCache<span class="params">()</span>.invalidate<span class="params">(url, <span class="literal">true</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何缓存POST请求的数据？">如何缓存POST请求的数据？</h3><p>通过源码我们可以看到，Volley存储缓存的key就是我们请求的URL，那POST怎么办呢？URL可都是一样的啊，想一想，我们可以自己定义一个Request，然后重写 public String getCacheKey()方法不就行了嘛，比如在URL后面加上请求参数的组拼MD5值。</p>
<h3 id="如何检查我们得到的数据是来自缓存还是网络？">如何检查我们得到的数据是来自缓存还是网络？</h3><p>Volley里面有个MarkerLog，默认是开启的，它能方便的让我们查看一个请求的生命周期，其中就包括从缓存获取数据的信息，因此我们可以取巧得到这个信息，我们继承Request：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyReques&lt;T&gt;</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Request&amp;lt</span>;</span><span class="type">T</span>&amp;gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> boolean cacheHit;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">public void addMarker(<span class="type">String</span> tag) &#123;</span><br><span class="line"><span class="keyword">super</span>.addMarker(tag);</span><br><span class="line">cacheHit = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (tag.equals(<span class="string">"cache-hit"</span>))&#123;</span><br><span class="line">cacheHit = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们添加一个cacheHit变量，通过源码得知：当Volley从缓存获取到数据之后会添加cache-hit信息，相应的，我们就知道他从缓存中获取到了数据。</p>
<h3 id="如何同步的执行一个请求？">如何同步的执行一个请求？</h3><p>Volley默认请求都是异步的，请求网络共有4条线程组成的线程池，还有一条缓存线程，关于请求，Volley实现了一个叫做RequestFuture的类，我们可以利用他来实现同步请求，比如接下来我们创建一个同步的JSON HTTP GET：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RequestFuture&lt;<span class="keyword">JSONObject</span>&gt; future = RequestFuture.newFuture();</span><br><span class="line">JsonObjectRequest request = <span class="keyword">new</span> JsonObjectRequest(URL, <span class="keyword">null</span>, future, future);</span><br><span class="line">requestQueue.<span class="built_in">add</span>(request);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">JSONObject</span> response = future.<span class="built_in">get</span>(); <span class="comment">// this will block</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// exception handling</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line"><span class="comment">// exception handling</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何上传文件？">如何上传文件？</h3><p>默认的，Volley并没有为我们实现上传文件的功能，但是我们可以自定义一个Request来实现：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MultipartRequest</span><span class="params">(String url, Response.ErrorListener errorListener, Response.Listener&lt;String&gt; listener, File file, String stringPart)</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(Method.POST, url, errorListener);</span><br><span class="line">mListener = listener;</span><br><span class="line">mFilePart = file;</span><br><span class="line">mStringPart = stringPart;</span><br><span class="line">buildMultipartEntity();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">buildMultipartEntity</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">entity.addPart(FILE_PART_NAME, <span class="keyword">new</span> FileBody(mFilePart));</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">entity.addPart(STRING_PART_NAME, <span class="keyword">new</span> StringBody(mStringPart));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnsupportedEncodingException e)</span><br><span class="line">&#123;</span><br><span class="line">VolleyLog.e(<span class="string">"UnsupportedEncodingException"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">String <span class="title">getBodyContentType</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> entity.getContentType().getValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBody() <span class="keyword">throws</span> AuthFailureError</span><br><span class="line">&#123;</span><br><span class="line">ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">entity.writeTo(bos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e)</span><br><span class="line">&#123;</span><br><span class="line">VolleyLog.e(<span class="string">"IOException writing to ByteArrayOutputStream"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">return</span> bos.<span class="title">toByteArray</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Response&lt;String&gt; parseNetworkResponse(NetworkResponse response)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Response.success(<span class="string">"Uploaded"</span>, getCacheEntry());</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(String response)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">mListener.onResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="关于Volley的缓存？">关于Volley的缓存？</h3><p>缓存，Volley是通过Response中的Header来设置缓存记录的生命周期的，主要体现在HttpHeaderParser.java文件的parseCacheHeaders()方法中。所以如果]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用MonkeyRunner进行自动化测试]]></title>
    <link href="http://yiqivr.com/2015/01/08/%E4%BD%BF%E7%94%A8MonkeyRunner%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://yiqivr.com/2015/01/08/使用MonkeyRunner进行自动化测试/</id>
    <published>2015-01-07T21:38:55.000Z</published>
    <updated>2015-08-04T15:15:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是_MonkeyRunner">什么是 MonkeyRunner</h3><p>MonkeyRunner是Google Android SDK下的一个工具，用于自动化测试Android程序。</p>
<p>Monkeyrunner工具提供了一套API，使用这些api写出的Python程序可以在黑盒地控制Android设置和模拟器。有了Monkeyrunner，我们可以通过python语句控制apk包的安装和卸载、启动app、向app发送各种动作指令、截取图片并保存。</p>
<p>Monkeyrunner和Monkey不同，Monkey是直接运行在adb shell中的命令，它随机的生成用户或者系统的各种随机事件（暴力测试，虐机必备），而MonkeyRunner则可以通过api来产生特定命令和事件来控制设备和模拟器。</p>
<p>MonkeyRunner在android测试中有下面特点：</p>
<ul>
<li><p>支持多设备： API可以跨多个设备或模拟器实施测试套件。您可以在同一时间接上所有的设备或一次启动全部模拟器（或统统一起），依据程序依次连接到每一个，然后运行一个或多个测试。您也可以用程序启动一个配置好的模拟器，运行一个或多个测试，然后关闭模拟器。</p>
</li>
<li><p>功能测试： monkeyrunner可以为一个应用自动贯彻一次功能测试。您提供按键或触摸事件的输入数值，然后观察输出结果的截屏。</p>
</li>
<li><p>回归测试：monkeyrunner可以运行某个应用，并将其结果截屏与既定已知正确的结果截屏相比较，以此测试应用的稳定性。</p>
</li>
<li><p>可扩展的自动化：由于monkeyrunner是一个API工具包，您可以基于Python模块和程序开发一整套系统，以此来控制Android设备。除了使用monkeyrunner API之外，您还可以使用标准的Python os和subprocess模块来调用如adb这样的Android工具。</p>
</li>
<li><p>monkeyrunner工具使用Jython（使用Java编程语言的一种Python实现）。Jython允许monkeyrunnerAPI与Android框架轻松的进行交互。使用Jython，您可以使用Python语法来获取API中的常量、类以及方法。</p>
</li>
</ul>
<h3 id="MonkeyRunner使用范例">MonkeyRunner使用范例</h3><p>接下来例举一个基本操作的Python脚本monkey_flow.py：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor"># python引入monkeyRunner模块</span></span><br><span class="line">from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice</span><br><span class="line"><span class="preprocessor"># 连接设备, 获得一个MonkeyDevice对象</span></span><br><span class="line">device = MonkeyRunner.waitForConnection()</span><br><span class="line"><span class="preprocessor"># 安装apk包. 返回值是boolean，可以判断是否安装成功</span></span><br><span class="line"><span class="preprocessor">#device.installPackage('myproject/bin/MyApplication.apk')</span></span><br><span class="line"><span class="preprocessor"># 设置要测试的包名</span></span><br><span class="line">package = <span class="string">'superdp.o20.dns.com'</span></span><br><span class="line"><span class="preprocessor"># 设置启动页面</span></span><br><span class="line">activity = <span class="string">'com.dns.o2o.superdp.ui.activity.SplashScreenActivity'</span></span><br><span class="line"><span class="preprocessor"># 设置component</span></span><br><span class="line">runComponent = package + <span class="string">'/'</span> + activity</span><br><span class="line"><span class="preprocessor"># 启动应用程序</span></span><br><span class="line">device.startActivity(component=runComponent)</span><br><span class="line"><span class="preprocessor"># 休眠5秒</span></span><br><span class="line">MonkeyRunner.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="preprocessor"># 截图</span></span><br><span class="line"><span class="preprocessor">#result = device.takeSnapshot()</span></span><br><span class="line"><span class="preprocessor"># 保存截图</span></span><br><span class="line"><span class="preprocessor">#result.writeToFile('shot.png','png')</span></span><br><span class="line"><span class="preprocessor"># 点击坐标</span></span><br><span class="line">device.touch(<span class="number">150</span>,<span class="number">685</span>,<span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 从(550,1250)拖拽到(550,850)</span></span><br><span class="line">device.drag((<span class="number">550</span>,<span class="number">1250</span>),(<span class="number">550</span>,<span class="number">850</span>),<span class="number">2</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 进入一个child为fragment的viewpager，滑到第二页</span></span><br><span class="line">device.drag((<span class="number">850</span>,<span class="number">1150</span>),(<span class="number">150</span>,<span class="number">1150</span>),<span class="number">1</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 返回第一页</span></span><br><span class="line">device.drag((<span class="number">150</span>,<span class="number">1150</span>),(<span class="number">850</span>,<span class="number">1150</span>),<span class="number">1</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 点击列表其中一项</span></span><br><span class="line">device.touch(<span class="number">555</span>,<span class="number">480</span>,<span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 进入详情，点击按钮提示未登录进入登录界面</span></span><br><span class="line">device.touch(<span class="number">800</span>,<span class="number">1680</span>,<span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 点击用户名输入框</span></span><br><span class="line">device.touch(<span class="number">450</span>,<span class="number">421</span>,<span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line"><span class="preprocessor"># 输入username</span></span><br><span class="line">device.type(<span class="string">'username'</span>)</span><br><span class="line"><span class="preprocessor"># 点击密码输入框</span></span><br><span class="line">device.touch(<span class="number">427</span>,<span class="number">582</span>,<span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line"><span class="preprocessor"># 输入password</span></span><br><span class="line">device.type(<span class="string">'password'</span>)</span><br><span class="line"><span class="preprocessor"># 点击登录</span></span><br><span class="line">device.touch(<span class="number">395</span>,<span class="number">911</span>,<span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">MonkeyRunner.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="preprocessor"># 用户名密码错误登录失败，一直返回退出应用</span></span><br><span class="line">device.press(<span class="string">'KEYCODE_BACK'</span>, <span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">device.press(<span class="string">'KEYCODE_BACK'</span>, <span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">device.press(<span class="string">'KEYCODE_BACK'</span>, <span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">device.press(<span class="string">'KEYCODE_BACK'</span>, <span class="string">'DOWN_AND_UP'</span>)</span><br><span class="line">device.press(<span class="string">'KEYCODE_BACK'</span>, <span class="string">'DOWN_AND_UP'</span>)</span><br></pre></td></tr></table></figure>
<p>有了脚本之后，直接在命令行进入脚本所在文件夹然后运行：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>monkey runner monkey_flow.py</span><br></pre></td></tr></table></figure>
<p>就能进行自动测试了。</p>
<p>接下来再来看一个实战范例：</p>
<p>有个需求，公司一个APP一共有几十套模板，一个个安装查看太麻烦了，我们就能用monkeyrunner来帮我们完成这些繁琐的操作：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">#</span>coding=utf-<span class="number">8</span></span><br><span class="line"><span class="built_in">import</span> time</span><br><span class="line"><span class="built_in">import</span> sys</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line">from com.android.monkeyrunner <span class="built_in">import</span> MonkeyRunner, MonkeyDevice, MonkeyImage</span><br><span class="line">packageName = 'superdp.o20.dns.com_package13'</span><br><span class="line">activity = 'com.dns.o2o.superdp.ui.activity.SplashScreenActivity'</span><br><span class="line">componentName = packageName + '/' + activity</span><br><span class="line">initTime = <span class="number">5</span></span><br><span class="line">name = sys.argv[<span class="number">0</span>].split<span class="params">('\\\\\')</span></span><br><span class="line">filename = name[len<span class="params">(name)</span> - <span class="number">1</span>]</span><br><span class="line">rootpath = os.path.split<span class="params">(os.path.realpath<span class="params">(sys.argv[<span class="number">0</span>])</span>)</span>[<span class="number">0</span>]</span><br><span class="line">dir = rootpath + '/apk/'</span><br><span class="line">screenPath = rootpath + '/screenShot/'</span><br><span class="line">countApk = len<span class="params">(os.listdir<span class="params">(dir)</span>)</span></span><br><span class="line">print<span class="params">('Connecting...')</span></span><br><span class="line">device = MonkeyRunner.waitForConnection<span class="params">()</span></span><br><span class="line">print<span class="params">('Removing...')</span></span><br><span class="line">device.removePackage<span class="params">(packageName)</span></span><br><span class="line">print<span class="params">('Removing package successful!')</span></span><br><span class="line">MonkeyRunner.sleep<span class="params">(<span class="number">2</span>)</span></span><br><span class="line"><span class="keyword">for</span> i in os.listdir<span class="params">(dir)</span>:</span><br><span class="line"> print<span class="params">(\'Installing...&amp;lt;%s&amp;gt;\'%i)</span></span><br><span class="line"> path = dir + '<span class="comment">//' + i</span></span><br><span class="line"> device.installPackage<span class="params">(path)</span></span><br><span class="line"> print<span class="params">('Install Successful!')</span></span><br><span class="line"> print<span class="params">('Starting activity...')</span></span><br><span class="line"> device.startActivity<span class="params">(component=componentName)</span></span><br><span class="line"> MonkeyRunner.sleep<span class="params">(initTime)</span></span><br><span class="line"> result = device.takeSnapshot<span class="params">()</span></span><br><span class="line"> print<span class="params">('Tack ScreenShot...')</span></span><br><span class="line"> result.writeToFile<span class="params">(screenPath + i + '.png', 'png')</span></span><br><span class="line"> print<span class="params">('Removing...')</span></span><br><span class="line"> device.removePackage<span class="params">(packageName)</span></span><br><span class="line"> print<span class="params">('Remove apk successful!')</span></span><br><span class="line"> MonkeyRunner.sleep<span class="params">(<span class="number">2</span>)</span></span><br></pre></td></tr></table></figure>
<p>脚本会依此安装apk文件夹里面的APK，然后启动程序之后截取首页图片保存在screenShot文件夹里面，接下来卸载这个APK，再安装下一个，直到APK循环完成。</p>
<h3 id="更多关于MonkeyRunner">更多关于MonkeyRunner</h3><p>我们还能使用MonkeyRunner提供的API来对截图进行基线图比对，比如如果80%相似就通过。</p>
<p>还能使用monkey_recorder.py和monkey_playback.py文件来对APP操作进行录制：首先使用monkeyrunner monkey_recorder.py来对操作进行录制，录制成功之后另存为mr文件，比如叫result.mr，然后使用monkeyrunner monkey_playback.py result.mr命令来进行回放。</p>
<h3 id="遇到的问题">遇到的问题</h3><p>SyntaxError: Non-ASCII character in file</p>
<p>查了下Python的默认编码文件是用的ASCII码，将文件存成了UTF-8也没用，解决办法很简单</p>
<p>只要在文件开头加入 # -<em>- coding: UTF-8 -</em>-    或者 #coding=utf-8 就行了。</p>
<h3 id="总结">总结</h3><p>MonkeyRunner提供的操作有限，适合重复性、短路径的测试，不适合连续性的操作，由于type和drag方法的不稳定，不容易适配，很容易偏离我们的预期。MonkeyRunner操作依赖于控件坐标（也可以通过id，比较耗时），一旦UI发生改变，脚本无法使用。</p>
<p>Monkeyrunner的等待机制<code>MonkeyRunner.sleep()</code>，无法更加友好地等待；MonkeyRunner不提供结果断言，我们只能通过截图比较，无法摆脱人工干预。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是_MonkeyRunner">什么是 MonkeyRunner</h3><p>MonkeyRunner是Google Android SDK下的一个工具，用于自动化测试Android程序。</p>
<p>Monkeyrunner工具提供了一套API，使用这些]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android执行shell命令]]></title>
    <link href="http://yiqivr.com/2015/01/01/Android%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/"/>
    <id>http://yiqivr.com/2015/01/01/Android执行shell命令/</id>
    <published>2014-12-31T23:01:15.000Z</published>
    <updated>2015-08-04T09:40:58.000Z</updated>
    <content type="html"><![CDATA[<p>希望让Android系统执行shell命令，我们主要使用Runtime.exec()方法，比如我们想查看根目录可以用如下方法：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Executes the command.</span></span><br><span class="line">Process process = <span class="keyword">Runtime</span>.getRuntime().exec(<span class="string">"/system/bin/ls /sdcard"</span>);</span><br><span class="line"><span class="comment">// Reads stdout.// <span class="doctag">NOTE:</span> You can write to stdin of the command using</span></span><br><span class="line"><span class="comment">// process.getOutputStream().</span></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line"><span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">read</span>;</span><br><span class="line"><span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4096</span>];</span><br><span class="line">StringBuffer output = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">while</span> ((<span class="keyword">read</span> = reader.<span class="keyword">read</span>(buffer)) &amp;gt; <span class="number">0</span>) &#123;</span><br><span class="line">output.<span class="keyword">append</span>(buffer, <span class="number">0</span>, <span class="keyword">read</span>);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br><span class="line"><span class="comment">// Waits for the command to finish.</span></span><br><span class="line">process.waitFor();</span><br><span class="line"><span class="keyword">return</span> output.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者使用这个方法（此方法在Android2.3版本经测试无效）：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// android.os.Exec is not included in android.jar so we need to use reflection.</span></span><br><span class="line">Class&amp;lt;?&amp;gt; execClass = Class.forName(<span class="string">"android.os.Exec"</span>);</span><br><span class="line">Method createSubprocess = execClass.getMethod(<span class="string">"createSubprocess"</span>, <span class="built_in">String</span>.<span class="keyword">class</span>, <span class="built_in">String</span>.<span class="keyword">class</span>, <span class="built_in">String</span>.<span class="keyword">class</span>, <span class="built_in">int</span>[].<span class="keyword">class</span>);</span><br><span class="line">Method waitFor = execClass.getMethod(<span class="string">"waitFor"</span>, <span class="built_in">int</span>.<span class="keyword">class</span>);</span><br><span class="line"><span class="comment">// Executes the command.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> createSubprocess() is asynchronous.</span></span><br><span class="line"><span class="built_in">int</span>[] pid = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">1</span>];</span><br><span class="line">FileDescriptor fd = (FileDescriptor)createSubprocess.invoke(<span class="keyword">null</span>, <span class="string">"/system/bin/ls"</span>, <span class="string">"/sdcard"</span>, <span class="keyword">null</span>, pid);</span><br><span class="line"><span class="comment">// Reads stdout.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> You can write to stdin of the command using new FileOutputStream(fd).</span></span><br><span class="line">FileInputStream <span class="keyword">in</span> = <span class="keyword">new</span> FileInputStream(fd);</span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">in</span>));</span><br><span class="line"><span class="built_in">String</span> output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">String</span> line;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">output += line + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// It seems IOException is thrown when it reaches EOF.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Waits for the command to finish.</span></span><br><span class="line">waitFor.invoke(<span class="keyword">null</span>, pid[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把命令换成”/system/bin/cat /proc/version”可以查看linux内核版本号、gcc编译器版本号、Red Hat版本号。还比如top、ps等命令都可以使用。</p>
<p>另外我们还可以实现修改hosts文件、拷贝文件、在root的前提下我们还可以实现静默安装（卸载）等等，用途非常多。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>希望让Android系统执行shell命令，我们主要使用Runtime.exec()方法，比如我们想查看根目录可以用如下方法：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Android系统的DownloadManager来实现自己的下载管理器]]></title>
    <link href="http://yiqivr.com/2014/12/31/%E4%BD%BF%E7%94%A8Android%E7%B3%BB%E7%BB%9F%E7%9A%84DownloadManager%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://yiqivr.com/2014/12/31/使用Android系统的DownloadManager来实现自己的下载管理器/</id>
    <published>2014-12-30T18:14:12.000Z</published>
    <updated>2015-08-04T09:33:37.000Z</updated>
    <content type="html"><![CDATA[<p>在Android系统中实现下载功能，我们平时都是使用的<strong>HttpURLConnection</strong>或者<strong>HttpClient</strong>来实现，其实在Android2.3（API9）的时候就引入了<strong>DownloadManager</strong>这个工具来帮我们轻松的实现下载功能。</p>
<p>主要用到的类有：</p>
<p><strong>DownloadManager</strong>：下载管理器</p>
<p><strong>Request</strong>：代表一个下载请求</p>
<p><strong>Query</strong>：查询下载数据库中下载状态</p>
<p>接下来我们来看看如何使用：首先我们需要从系统服务中获取这个DownloadManager：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DownloadManager downloadManger = <span class="params">(DownloadManager)</span> context.getSystemService<span class="params">(Context.DOWNLOAD_SERVICE)</span>;</span><br></pre></td></tr></table></figure>
<p>然后实例化一个Request：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request request = new Request<span class="list">(<span class="keyword">Uri</span>.parse<span class="list">(<span class="keyword">uriString</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>最后将这个请求放入下载堆栈中即可：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> downloadId = downloadManger.enqueue(request);</span><br></pre></td></tr></table></figure>
<p>然后系统就会自动下载你的请求了。</p>
<p>是不是非常简单呢？接下来我们看看完整的代码：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DownloadManager downloadManger = <span class="params">(DownloadManager)</span> context.getSystemService<span class="params">(Context.DOWNLOAD_SERVICE)</span>;</span><br><span class="line">Request request = new Request<span class="params">(Uri.parse<span class="params">(uriString)</span>)</span>;</span><br><span class="line">request.setAllowedNetworkTypes<span class="params">(Request.NETWORK_MOBILE | Request.NETWORK_WIFI)</span>;</span><br><span class="line"><span class="comment">//设置不显示下载通知</span></span><br><span class="line">request.setShowRunningNotification<span class="params">(<span class="literal">false</span>)</span>;</span><br><span class="line">request.setVisibleInDownloadsUi<span class="params">(<span class="literal">false</span>)</span>;</span><br><span class="line"><span class="comment">//判断SD卡是否存在</span></span><br><span class="line">boolean SDCardEnabled = LibIOUtil.getExternalStorageState<span class="params">()</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="params">(SDCardEnabled)</span> &#123;</span><br><span class="line">request.setDestinationInExternalFilesDir<span class="params">(context, AppUtil.getPackageName<span class="params">(context)</span>, AsyncTaskLoaderImage.getHash<span class="params">(uriString)</span>)</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">request.setDestinationUri<span class="params">(null)</span>;</span><br><span class="line">&#125;</span><br><span class="line">long downloadId = downloadManger.enqueue<span class="params">(request)</span>;</span><br></pre></td></tr></table></figure>
<p>那我们怎么知道什么时候这个请求下载完成了呢？其实在下载完成之后系统会给我们发送一个广播：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BroadcastReceiver receiver = new BroadcastReceiver<span class="params">()</span> &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onReceive<span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">String action = intent.getAction<span class="params">()</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="params">(DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals<span class="params">(action)</span>)</span> &#123;</span><br><span class="line">long downloadId = intent.getLongExtra<span class="params">(DownloadManager.EXTRA_DOWNLOAD_ID, <span class="number">0</span>)</span>;</span><br><span class="line">DownloadManager.Query query = new DownloadManager.Query<span class="params">()</span>;</span><br><span class="line">query.setFilterById<span class="params">(downloadId)</span>;</span><br><span class="line">Cursor c = dm.query<span class="params">(query)</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="params">(c.moveToFirst<span class="params">()</span>)</span> &#123;</span><br><span class="line">int columnIndex = c.getColumnIndex<span class="params">(DownloadManager.COLUMN_STATUS)</span>;</span><br><span class="line"><span class="keyword">if</span> <span class="params">(DownloadManager.STATUS_SUCCESSFUL == c.getInt<span class="params">(columnIndex)</span>)</span> &#123;</span><br><span class="line">String uriString = </span><br><span class="line">c.getString<span class="params">(c.getColumnIndex<span class="params">(DownloadManager.COLUMN_LOCAL_URI)</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">registerReceiver<span class="params">(receiver, new IntentFilter<span class="params">(DownloadManager.ACTION_DOWNLOAD_COMPLETE)</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>同时我们也可以在任何时候来查询状态，并且查找的时候缩小范围，比如我们只想查找下载完成的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">query</span><span class="class">.setFilterByStatus</span>(<span class="tag">DownloadManager</span><span class="class">.STATUS_SUCCESSFUL</span>);</span><br></pre></td></tr></table></figure>
<p>或者暂停的、失败的、等待的、正在下载的。</p>
<p>综上，使用此类实现一个自己的下载管理器是十分方便的有木有！不用自己管理数据库等一系列繁琐的操作。</p>
<p>续：不过令人遗憾的是：在测试过程中使用三星GT-I9500的时候使用此API出现了崩溃。解决不了！为什么这么肯定呢？因为我TM点他系统的下载管理APP都崩了好吗？不知道是个别机器的原因还是什么，暂记吧~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android系统中实现下载功能，我们平时都是使用的<strong>HttpURLConnection</strong>或者<strong>HttpClient</strong>来实现，其实在Android2.3（API9）的时候就引入了<strong>DownloadM]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Android Studio，你需要知道的9件事]]></title>
    <link href="http://yiqivr.com/2014/12/18/%E5%85%B3%E4%BA%8EAndroid-Studio%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%849%E4%BB%B6%E4%BA%8B/"/>
    <id>http://yiqivr.com/2014/12/18/关于Android-Studio，你需要知道的9件事/</id>
    <published>2014-12-18T06:40:19.000Z</published>
    <updated>2015-08-04T15:25:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="如何构建你的项目Build_your_Project_in_Android_Studio">如何构建你的项目Build your Project in Android Studio</h3><p>点击Build然后选择Make Project，最后点击右下方的Gradle Console查看打印信息。</p>
<h3 id="Gradle_Tasks的使用">Gradle Tasks的使用</h3><p>点击右侧的Gradle，依次展开项目名–:app，可以查看所有的Gradle任务，比如双击assembleRelease，就可以执行此task。双击assemble，表示同时执行assembleDebug和assembleRelease，会在目录app/build/apk/生成对应的debug和release的APK。</p>
<p>生成的APK命名规则：app-flavor-buildtype.apk; 比如： app-full-release.apk 和 app-demo-debug.apk.</p>
<p>也可以在左下角点击控制台进行相应的任务命令：比如输入gradle tasks命令可以查看所有的task、输入gradle build命令表示同时执行assemble和check；同时命令还支持驼峰匹配：比如gradle aR等同于gradle assembleRelease。</p>
<h3 id="运行配置">运行配置</h3><p>点击Run选择Edit Configuration，展开Android Application，可以新建一个配置或者编辑一个现有的配置：可以配置是否自动启动默认Activity，启动特定Activity，部署目标是否手动选择，比如可以自动部署到USB（真机）；模拟器网速控制：</p>
<p>网速规则如下所示：</p>
<p>None: no latency</p>
<p>GPRS: GPRS (min 150, max 550 milliseconds)</p>
<p>EDGE: EDGE/EGPRS (min 80, max 400 milliseconds)</p>
<p>UMTS: UMTS/3G (min 35, max 200 milliseconds)</p>
<p>同时可以配置模拟器启动时的额外命令行：</p>
<p>比如启动适配屏幕：-scale 96dpi；还有logcat配置：比如是否每次启动时自动清空。</p>
<h3 id="运行">运行</h3><p>点击Run然后选择Run (或者 Run debug)</p>
<p>此操作将经历三个主要步骤：编译项目—创建一个默认运行配置（有则使用现有配置安装并运行）。</p>
<p>如果是部署到真机需要注意：</p>
<p>在build.gradle文件中配置 application 标签下：android:debuggable为true。（经过测试不配也行）</p>
<p>在真机上启用USB debugging：</p>
<p>如Android 3.2或更早：Settings &gt; Applications &gt; Development</p>
<p>4.0或更新：Settings &gt; Developer options</p>
<p>4.2或更新的版本默认是隐藏的，需要前往 Settings &gt; About phone点击Build number7下，返回上一个页面可见。</p>
<h3 id="使用命令行">使用命令行</h3><p>构建一个debug版本，先执行：<code>$ chmod +x gradlew（第一次执行需授权命令）</code></p>
<p>然后执行：<code>$ ./gradlew assembleDebug</code>，构建完成后apk的位置：app/build/outputs/apk/。</p>
<p>如果为库文件则lib/build/outputs/libs/。构建一个release版本，执行命令：<code>$ ./gradlew assembleRelease</code>注意：此操作完成后还未进行签名，不能安装。</p>
<p>接下来可用手动签名和zipalign，也可以利用build script配置自动签名和zipalign。</p>
<p>这里只介绍下自动签名：</p>
<p>在build.gradle中添加 storeFile, storePassword, keyAlias and keyPassword相关信息：</p>
<p>比如：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">defaultConfig &#123; ... &#125;</span><br><span class="line">signingConfigs &#123;</span><br><span class="line">release &#123;</span><br><span class="line">storeFile file(<span class="string">"myreleasekey.keystore"</span>)</span><br><span class="line">storePassword <span class="string">"password"</span></span><br><span class="line">keyAlias <span class="string">"MyReleaseKey"</span></span><br><span class="line">keyPassword <span class="string">"password"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buildTypes &#123;</span><br><span class="line">release &#123;</span><br><span class="line">...</span><br><span class="line">signingConfig signingConfigs.release</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>也可以在Project Structure—&gt; Signing中进行配置，配置成功后会自动在build.gradle文件中生成相关信息。</p>
<p>再次assembleRelease，成功之后就会生成一个your_module_name-release.apk，此apk是签名并且zipalign处理过的。</p>
<p>最后使用命令：adb install path_to_your_bin.apk 就能安装到你的模拟器或者真机啦。</p>
<h3 id="Gradle_Build配置">Gradle Build配置</h3><p>gradle build配置是使用DSL（特定领域语言）Groovy来配置构建逻辑的。我们主要是进行配置以下几个方面：</p>
<p>Build variants（暂且叫构建变体吧）：使用此功能不必创建多个项目仅仅使用相同的module就能生成多个不同版本的APK，比如试用版和注册版。</p>
<p>Dependencies（依赖关系）：可以使用本地库或者远程仓库来配置依赖关系。</p>
<ul>
<li>Manifest entries（清单）：可以生成多个比如不同版本号、项目名称等的APK。</li>
<li>Signing（签名）：允许在构建APK的时候进行签名。</li>
<li>ProGuard（混淆）：配置混淆。</li>
<li>Testing（测试）：不用另外新建测试项目就能进行测试，非常的方便。</li>
</ul>
<h3 id="项目project与模块module两者关系：一个项目有1个或多个模块组成，单个模块由源代码和资源组成，可以独立进行build、Test、debug。">项目project与模块module两者关系：一个项目有1个或多个模块组成，单个模块由源代码和资源组成，可以独立进行build、Test、debug。</h3><p>关于模块，主要有以下几种：</p>
<ul>
<li>Android应用程序模块Android application modules：主要的模块，可能是mobile, TV, Wear, Glass。</li>
<li>Android库模块Android library modules：包含一些可重用的源码和资源，构建程序会将之生成AAR (Android Archive)。</li>
<li>应用引擎模块App Engine modules：包含APP集成引擎的代码和资源。</li>
<li>jar包Java library modules：包含一些可重用代码，构建程序将之生成jar包。</li>
</ul>
<p>一个项目有一个项目级别的build.gradle文件，此文件配置所有模块通用的配置，而每个模块都有自己的build.gradle文件来配置特有的设置。</p>
<p>关于这个项目级别的build.gradle：默认项目会定义Gradle的仓库与依赖关系，支持的仓库包括 JCenter, Maven Central, 或者 Ivy.下面的例子说明了使用JCenter仓库、0.14.4版本的Gradle：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:0.14.4'</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here: they belong</span></span><br><span class="line"><span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">jcenter()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：Android的SDK配置在 local.properties的sdk.dir属性中。<br>关于各个模块的build.gradle：主要会配置以下几个方面：</p>
<ul>
<li>android settings：比如编译版本和构建工具版本。</li>
<li>defaultConfig and productFlavors：清单属性比如applicationId, minSdkVersion, targetSdkVersion等等。</li>
<li>buildTypes：构建属性比如是否可以debug、是否混淆等。</li>
<li>dependencies</li>
</ul>
<p>下面是一个例子：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">apply</span> plugin:<span class="string">'com.android.application'</span></span><br><span class="line">android &#123;</span><br><span class="line"><span class="title">compileSdkVersion</span> <span class="number">20</span></span><br><span class="line">buildToolsVersion <span class="string">"20.0.0"</span></span><br><span class="line">defaultConfig &#123;</span><br><span class="line"><span class="title">applicationId</span> <span class="string">"com.mycompany.myapplication"</span></span><br><span class="line">minSdkVersion <span class="number">13</span></span><br><span class="line">targetSdkVersion <span class="number">20</span></span><br><span class="line">versionCode <span class="number">1</span></span><br><span class="line">versionName <span class="string">"1.0"</span></span><br><span class="line">&#125;</span><br><span class="line">buildTypes &#123;</span><br><span class="line"><span class="title">release</span> &#123;</span><br><span class="line"><span class="title">minifyEnabled</span> <span class="built_in">false</span></span><br><span class="line">proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),<span class="string">'proguard-rules.pro'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">debug</span> &#123;</span><br><span class="line"><span class="title">debuggable</span> <span class="built_in">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line"><span class="title">compile</span> fileTree(dir:<span class="string">'libs'</span>, include:[<span class="string">'*.jar'</span>])</span><br><span class="line">compile <span class="string">'com.android.support:appcompat-v7:20.0.0'</span></span><br><span class="line">compile project(path:<span class="string">':app2, configuration: '</span>android-endpoints<span class="string">')</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="关于dependencies依赖关系支持三种：分别是模块依赖、本地二进制依赖、远程二进制依赖。">关于dependencies依赖关系支持三种：分别是模块依赖、本地二进制依赖、远程二进制依赖。</h3><p>远程依赖格式：group:name:version，比如：com.google.guava:guava:16.0.1。</p>
<p>因此也可以写成compile group:’com.google.android’,name:’support-v4’,version:’r7’。</p>
<p>MyProject/</p>
<p>/ app</p>
<p>/ libraries</p>
<p>–/ lib1</p>
<p>–/ lib2/</p>
<p>则对应：</p>
<p>:app</p>
<p>:libraries:lib1</p>
<p>:libraries:lib2</p>
<p>然后在settings.gradle文件中则变成了：include ‘:app’, ‘:libraries:lib1’, ‘:libraries:lib2’。</p>
<h3 id="构建变体（build_variant）">构建变体（build variant）</h3><p>总的来说：Build Type + Product Flavor = Build Variant</p>
<p>每个生成的APK都是由一种构建变体决定的。一个构建变体由product flavors 和 build types决定；</p>
<p>Product flavors代表一个项目版本，这是你随便定义的，比如区分付费的版本还是免费的版本、是那个CUP类型的版本等等。</p>
<p>下面是一个例子：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">...</span></span><br><span class="line">android &#123;</span><br><span class="line"><span class="attribute">...</span></span><br><span class="line">defaultConfig &#123; <span class="attribute">...</span> &#125;</span><br><span class="line">signingConfigs &#123; <span class="attribute">...</span> &#125;</span><br><span class="line">buildTypes &#123; <span class="attribute">...</span> &#125;</span><br><span class="line">productFlavors &#123;</span><br><span class="line">demo &#123;</span><br><span class="line">applicationId <span class="string">"com.buildsystemexample.app.demo"</span></span><br><span class="line">versionName <span class="string">"1.0-demo"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">full</span> &#123;</span><br><span class="line">applicationId <span class="string">"com.buildsystemexample.app.full"</span></span><br><span class="line">versionName <span class="string">"1.0-full"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">...</span></span><br></pre></td></tr></table></figure>
<p>这里的applicationId代表不同的包名，因为要生成不同的APP。</p>
<p>Build types就是之前讲的，比如是debug还是release，一个build variant就是两者任意一种的组合。</p>
<p>默认的Android Studio定义了两种build types，没有product flavors。所以只有两种build variants：debug和release。然后构建系统根据每种变体生成对应的APK。</p>
<p>现在比如我们新增两种product flavors：demo和full，就应该有四种build variant：</p>
<p>demoDebug、demoRelease、fullDebug、fullRelease。</p>
<p>如果现在我们再加上一种product flavors：CPU/ABI类型，分别为x86、arm、mips，同理，那么我们就应该有12种build variant。</p>
<p>Android Studio为了共用代码，变体使用文件夹规则来合并成一种变体：</p>
<p>关于变体合并优先级从低到高的顺序为：libraries/dependencies -&gt; main src -&gt; productFlavor -&gt; buildType。</p>
<p>接下来说说源码文件夹的定义规则：</p>
<p>src/main/ - the main source directory (默认配置，所有变体通用)</p>
<p>src/buildType/ - the source directory</p>
<p>src/productFlavor/ - the source directory</p>
<p>比如：</p>
<p>src/main/ (default configuration)</p>
<p>src/release/ (build type)</p>
<p>src/demo/ (flavor - app type dimension)</p>
<p>src/arm/ (flavor - ABI dimension)</p>
<p>在每个源码文件夹里面我们可以使用相同的文件名，但是有个前提，就是这两个文件夹不会组合成一种变体。</p>
<p>构建程序还会将所有的manifests合并成一个manifests，所以最后的manifest定义了不同的components or permissions，manifest合并也有优先级，优先级从低到高的顺序为：libraries/dependencies -&gt; main src -&gt; productFlavor -&gt; buildType。</p>
<p>这儿有个命令规则：</p>
<p>assemble&lt;Variant Name&gt;</p>
<p>assemble&lt;Build Type Name&gt;</p>
<p>assemble&lt;Product Flavor Name&gt;</p>
<p>执行上述命令可生成对应的变体APK。</p>
<p>比如有两个product flavors：flavor1和flavor2，执行：assembleFlavor1Debug生成对应的APK；</p>
<p>给定Build Type执行assembleDebug：将生成Flavor1Debug和Flavor2Debug两个变体；</p>
<p>给定flavor执行assembleFlavor1：生成Flavor1Debug和Flavor1Release两个变体。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="如何构建你的项目Build_your_Project_in_Android_Studio">如何构建你的项目Build your Project in Android Studio</h3><p>点击Build然后选择Make Project，最后点击右下方的Gr]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android官方下拉刷新SwipeRefreshLayout使用]]></title>
    <link href="http://yiqivr.com/2014/12/15/Android%E5%AE%98%E6%96%B9%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0SwipeRefreshLayout%E4%BD%BF%E7%94%A8/"/>
    <id>http://yiqivr.com/2014/12/15/Android官方下拉刷新SwipeRefreshLayout使用/</id>
    <published>2014-12-14T22:39:18.000Z</published>
    <updated>2015-08-04T08:44:11.000Z</updated>
    <content type="html"><![CDATA[<p>说到下拉刷新，大家肯定都用过，最常见的莫过于ListView的下拉刷新了，那大家用的是开源的第三方框架PullToRefresh还是其他的呢？或者是自己实现的呢？可能大部分都是继承ListView实现的吧？那如果我想要实现WebView的下拉刷新呢？或者GridView的呢？是不是又得重新去实现呢？好像是挺麻烦的。</p>
<p>今天介绍的是下拉刷新组件叫<strong>SwipeRefreshLayout</strong>，大家可以在最新的<em>android.support.v4</em>或者<em>android.support.v13</em>里面找到它，利用它，大家可以轻松实现你自己想要的下拉刷新，因为<strong>SwipeRefreshLayout</strong>继承自ViewGroup，而非特定的ListView或其他的View。我们使用它的时候只需要将想要实现下拉的View包裹在一个可以滚动的View里面既可（比如ScrollView、ListView）。</p>
<p>主要方法：</p>
<ul>
<li><strong>isRefreshing</strong> 返回现在是否正在刷新状态。</li>
<li><strong>setRefreshing(boolean refreshing)</strong> 主动显示刷新状态可以设置为true，当刷新操作完成的时候需要调用此方法设置为false。</li>
<li><strong>setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener listener)</strong> 主要方法，设置刷新操作回调，当用户出发下拉刷新操作后会主动回调改方法。</li>
</ul>
<p>接下来看看如何实现的吧：</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="tag">&lt;<span class="title">android.support.v4.widget.SwipeRefreshLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
<span class="attribute">android:id</span>=<span class="value">"@+id/srl"</span>
<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">ScrollView</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">LinearLayout</span>
            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
            <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span>
            ...
        <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span>
<span class="tag">&lt;/<span class="title">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span>
</code></pre><p>我们将想要实现下拉刷新的视图包裹在了一个ScrollView里面。</p>
<pre><code>SwipeRefreshLayout srl = (SwipeRefreshLayout) findViewById(R.id.srl);
rl.setOnRefreshListener(<span class="keyword">new</span> OnRefreshListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>{
        srl.postDelayed(<span class="keyword">new</span> Runnable() {
        <span class="annotation">@Override</span> 
        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span>  <span class="title">run</span><span class="params">()</span> </span>{
            srl.setRefreshing(<span class="keyword">false</span>);
        }, <span class="number">3000</span>);
});
</code></pre><p>我们先实例化<strong>SwipeRefreshLayout</strong>，然后设置刷新回调就行了，3秒钟后设置刷新完成（当然实战中是网络操作或是其他想要的需求），是不是很简单啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说到下拉刷新，大家肯定都用过，最常见的莫过于ListView的下拉刷新了，那大家用的是开源的第三方框架PullToRefresh还是其他的呢？或者是自己实现的呢？可能大部分都是继承ListView实现的吧？那如果我想要实现WebView的下拉刷新呢？或者GridView的呢]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[规范命名，远离bug]]></title>
    <link href="http://yiqivr.com/2014/12/11/%E8%A7%84%E8%8C%83%E5%91%BD%E5%90%8D%EF%BC%8C%E8%BF%9C%E7%A6%BBbug/"/>
    <id>http://yiqivr.com/2014/12/11/规范命名，远离bug/</id>
    <published>2014-12-10T23:17:06.000Z</published>
    <updated>2015-08-04T15:25:49.000Z</updated>
    <content type="html"><![CDATA[<p>做好命名规范不仅能够帮我们更好的理解代码，而且能够让bug无处可藏。接下来举两个关于命名不规范可能引发的不常见问题：</p>
<h3 id="对View设置事件不起作用">对View设置事件不起作用</h3><p>假设我们对一个Button设置点击事件，这个Button的id是btn，代码如下：</p>
<pre><code><span class="tag">findViewById</span>(R.id.btn)<span class="class">.setOnClickListener</span>(new <span class="function">OnClickListener</span>() {
    <span class="variable">@Override</span>
    public void <span class="function">onClick</span>(View v) {
        <span class="comment">// TODO</span>
    }
});
</code></pre><p>经过测试之后这个<code>onClick</code>打死也不会调用，各位看官会怎么想？我反正第一个感觉就是肯定这个<code>Button</code>不是我们想要监听的<code>Button</code>，接下来就仔细检查XML布局文件吧，果然，我们监听的这个<code>Button</code>在某个不起眼的小角落（比如<code>include</code>标签里面的布局），然后在上层布局（或者上上层布局）有个一样的id也叫btn，我们直接find出来的应该是上层的<code>Button</code>。解决方案很简单啦，命好名吧，或者用它的上层布局去find它，比如<code>parentView.findViewById(R.id.btn)</code>。</p>
<h3 id="出现了java-lang-StackOverflowError这个问题的出现一般都是有循环调用的情况出现，少数情况是布局实在是太深了，嵌套的太多了。">出现了<code>java.lang.StackOverflowError</code>这个问题的出现一般都是有循环调用的情况出现，少数情况是布局实在是太深了，嵌套的太多了。</h3><p>大家先来看看这个自定义的drawable，名字叫<em>back_btn.xml</em>:</p>
<pre><code><span class="pi">&lt;?xmlversion="1.0"encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">selector</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span>
<span class="tag">&lt;<span class="title">item</span>
    <span class="attribute">android:state_pressed</span>=<span class="value">"false"</span>
    <span class="attribute">android:drawable</span>=<span class="value">"@drawable/back_btn"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">item</span>
    <span class="attribute">android:state_pressed</span>=<span class="value">"true"</span>
    <span class="attribute">android:drawable</span>=<span class="value">"@drawable/back_btned"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">item</span> 
    <span class="attribute">android:drawable</span>=<span class="value">"@drawable/back_btn"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">selector</span>&gt;</span>
</code></pre><p>当我们加载这个<em>back_btn.xml</em>的时候，就会出现循环调用的问题，而且问题也不好定位。解决方案当然也是命好你的名了，比如按下的图片可以命名为<em>back_btn_p</em>,这个<em>selector</em>可以命名为<em>back_btn_selector.xml</em>。</p>
<p>通过上面两个范例，大家应该知道命名的规范重要性了吧，那么久从今天开始，就规范命名，远离bug吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做好命名规范不仅能够帮我们更好的理解代码，而且能够让bug无处可藏。接下来举两个关于命名不规范可能引发的不常见问题：</p>
<h3 id="对View设置事件不起作用">对View设置事件不起作用</h3><p>假设我们对一个Button设置点击事件，这个Button的i]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决Ant编译打包错误: 非法字符: '﻿']]></title>
    <link href="http://yiqivr.com/2014/12/01/%E8%A7%A3%E5%86%B3Ant%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E9%94%99%E8%AF%AF-%E9%9D%9E%E6%B3%95%E5%AD%97%E7%AC%A6-ufeff/"/>
    <id>http://yiqivr.com/2014/12/01/解决Ant编译打包错误-非法字符-ufeff/</id>
    <published>2014-12-01T01:18:32.000Z</published>
    <updated>2015-08-04T07:56:04.000Z</updated>
    <content type="html"><![CDATA[<p>这个问题其实是UTF-8编码格式的Byte Order Mark问题。解决很简单，只要去掉BOM头就行了。</p>
<p>安装了NotePad++或者EditPlus的朋友可以直接另存一下UTF-8无BOM格式编码即可。</p>
<p>因为本人使用的是Mac，所以就直接在vim上操作了，主要命令是下面几个：</p>
<ul>
<li>去掉BOM标记</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> nobomb</span><br></pre></td></tr></table></figure>
<ul>
<li>加上BOM标记</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> bomb</span><br></pre></td></tr></table></figure>
<ul>
<li>查询当前UTF-8编码的文件是否有BOM标记</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> bomb?</span><br></pre></td></tr></table></figure>
<ul>
<li>以16进制模式打开文件</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:%!xxd </span><br><span class="line"><span class="string">"删除文件开头的EF  BB  BF</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将以16进制格式打开的文件返回文本模式编辑</li>
</ul>
<pre><code><span class="symbol">:%</span>!xxd -r
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>这个问题其实是UTF-8编码格式的Byte Order Mark问题。解决很简单，只要去掉BOM头就行了。</p>
<p>安装了NotePad++或者EditPlus的朋友可以直接另存一下UTF-8无BOM格式编码即可。</p>
<p>因为本人使用的是Mac，所以就直接在v]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建基于Android开发的持续集成引擎]]></title>
    <link href="http://yiqivr.com/2014/11/28/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EAndroid%E5%BC%80%E5%8F%91%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%BC%95%E6%93%8E/"/>
    <id>http://yiqivr.com/2014/11/28/搭建基于Android开发的持续集成引擎/</id>
    <published>2014-11-27T23:50:53.000Z</published>
    <updated>2015-08-04T15:13:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p><a href="http://book.douban.com/subject/10769596/" target="_blank" rel="external">《持续集成:软件质量改进和风险降低之道》</a>全面深入地讨论持续集成的各个方面，介绍了一种增加项目可见性、降低项目失败风险的有效实践。那我们在移动开发中要怎么应用呢？ 持续集成（Continuous integration）简称CI，是一种软件开发的实践，可以让团队在持续集成的基础上收到反馈并加以改进，不必等到开发的后期才寻找和修复缺陷。在平时的开发中，项目一般会经历这几个步骤：</p>
<ol>
<li>程序员从源代码仓库下载最新程序</li>
<li>li&gt;程序员编写代码、测试用例，并提交更新结果给版本控制仓库</li>
<li>CI服务器根据触发条件，从版本控制仓库提取最新代码，交给构建工具的工作空间</li>
<li>构建工具对代码进行编译、测试，并进行打包。如有必要，实现产品部署、发布</li>
<li>通过构建工具与版本控制工具的配合，实现产品版本控制与管理</li>
<li>建立、管理项目开发的工作网站</li>
</ol>
<p>有了持续集成，我们可以大大减少集成的问题，让团队能够更快的开发内聚的软件。 接下来我们看看怎么搭建基于<strong>Jenkins+ant(maven/gradle)+github</strong>的集成系统。</p>
<h3 id="什么是Jenkins?">什么是Jenkins?</h3><p>Jenkins是一个开源项目，提供了一种易于使用的持续集成系统，使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。Jenkins 的前身是Hudson是一个可扩展的持续集成引擎。</p>
<h3 id="Jenkins的安装与配置">Jenkins的安装与配置</h3><p>首先我们在jenkins的<a href="http://jenkins-ci.org/" target="_blank" rel="external">官网</a>下载war安装包，下载完成后放在tomcatwebapps目录下，然后启动tomcat在浏览器访问<a href="http://localhost:8080/jenkins，就可以成功安装。" target="_blank" rel="external">http://localhost:8080/jenkins，就可以成功安装。</a> 接下来我们配置Jenkins,安装好了以后，可以看到如下界面：</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9dQoxL/czF6X.png" alt=""></p>
<p>主页显示了我们构建的项目列表，当然现在大家看到的应该是空的。接下来我们安装一些必要的插件，点击系统管理—-》管理插件看见以下界面：</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9edUBm/9zgu4.png" alt=""></p>
<p>可以看见Jenkins已经为我们安装了一些必要厂要的插件，比如Ant Plugin、JUnit Plugin等等。然后点击可选插件，勾选Git Plugin、Github Plugin。（上面有个过滤，大家别慢慢滑着找啊，手会酸的，Jenkins有非常丰富的插件，以后大家还可以自行配置XCode Plugin，配合Command Tool使用。）然后点击直接安装。 安装好了插件之后，再来配置一些系统，点击系统管理—-》系统配置看到如下界面：</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9p5VP0/medium.jpg" alt=""></p>
<p>系统消息可以填写一些消息，这个信息会显示在首页顶部， 用来向用户发布一些系统范围的通知或公告，兼容HTML标签格式。</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9prQC1/medium.jpg" alt=""></p>
<p>然后滑到Git Plugin，配置好自己的姓名和邮箱。当然，没有安装Git和ant的小伙伴们需要自己添加下。</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9q6if8/medium.jpg" alt=""></p>
<p>如果需要邮件自动提醒功能的话，还可以配置上SMTP邮件，配置完成后可以发送测试邮件测试配置。</p>
<h3 id="Jenkins的使用">Jenkins的使用</h3><p>配置好了以后，我们来新建一个项目：点击新建，输入名称，选择构建一个自由风格的软件项目。可以看到如下的界面：</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9eIEGx/medium.jpg" alt=""></p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9d3Cyq/medium.jpg" alt=""></p>
<p>接下来在GitHub project一栏输入你的项目Git地址，在源码管理一栏选择Git，然后在Repository URL输入Git仓库地址，然后在Credentials添加一个你的账号。</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9dCyT8/medium.jpg" alt=""></p>
<p>接下来我们可以选择构建触发器，构建触发器可以在我们往Git仓库push的时候自动pull代码然后自动编译打包，我们勾选Build when a change is pushed to GitHub和Poll SCM，然后出现了日程表一栏，在这儿我们输入H/5 <em> </em> <em> </em> ，表示每隔5分钟获取一次更新信息，大家可以自行配置。</p>
<p>接下来到了构建了，我们增加构建步骤，选择Invoke Ant，在Ant Version一栏选择我们在系统配置中添加的Ant别名，然后Target大家看着办的，如果是发布的话就填release，测试包可以天debug，跟大家平时使用Ant一样，还可以点击高级，有个Properties等，这些也和Ant配置一样，可以填写sdk.dir=\”xxx\”等等信息。</p>
<p>然后点击增加构建后操作步骤，我们可以选择E-mail Notification，这样可以在构建成功以后给相应的人员发送邮件，比如张三最后一次提交，然后构建出问题了，就会发邮件给张三让他滚回公司来改bug。最后我们点击保存就完成一个项目的创建了。</p>
<h3 id="开始使用Jenkins构建项目">开始使用Jenkins构建项目</h3><p>我们回到项目主页，入下图所示：</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9eWQgr/medium.jpg" alt=""></p>
<p>接下来点击立即构建，见证奇迹的时候到了，构建历史栏目会显示你当前的构建进度，最后构建成功之后会显示蓝色小球，失败会显示红色小球，如果失败，可以点击红色小球查看控制台输出，然后对应解决bug。</p>
<p><img src="http://pic.yupoo.com/lvning10086/Ef9feXDK/zQald.png" alt=""></p>
<h3 id="最后">最后</h3><p>最后？其实Jenkins还有许多强大的功能，比如用户权限管理等等，大家自己折腾吧！最后最后就是享受CI给我们带来的极大便捷吧！HAVE FUN！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p><a href="http://book.douban.com/subject/10769596/" target="_blank" rel="external">《持续集成:软件质量改进和风险降低之道》</a>全面深入地讨论持续集成的]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git高级命令技巧]]></title>
    <link href="http://yiqivr.com/2014/11/27/Git%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7/"/>
    <id>http://yiqivr.com/2014/11/27/Git高级命令技巧/</id>
    <published>2014-11-27T07:27:24.000Z</published>
    <updated>2015-08-04T15:16:25.000Z</updated>
    <content type="html"><![CDATA[<p>毫无疑问，Git与Github已经逐渐成为开源世界的协作首选了，一些基本的Git入门知识与命令这儿就不再概述了（在此推荐经典入门教程<a href="http://git-scm.com/book/zh/v1" target="_blank" rel="external">Pro Git中文在线版</a>），接下来列举一些高级技巧：</p>
<h3 id="显示漂亮的Git_log日志">显示漂亮的Git log日志</h3><p>一般情况下我们使用<code>git log</code>命令来显示log日志，效果如下图：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EeSZZs40/iDQBj.png" alt=""></p>
<p><code>git log</code>看起来就是稍微死板了点儿，从中获取不了太多的信息，接下来我们使用下面的命令来试试：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">$ git log --graph --pretty=format:</span>'<span class="var_expand">%Cred%</span>h<span class="var_expand">%Creset -%</span>C(yellow)<span class="var_expand">%d%</span>Creset <span class="var_expand">%s %</span>Cgreen(<span class="var_expand">%cr) %</span>C(bold blue)&lt;<span class="var_expand">%an&gt;%</span>Creset' --abbrev-commit --</span><br></pre></td></tr></table></figure>
<p>再来看看效果如何：</p>
<p><img src="http://pic.yupoo.com/lvning10086/EeT0h1qe/FroXE.png" alt=""></p>
<p>是不是秒变白富美啊！其实我们还可以更简化一下，使用别名：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'<span class="variable">%Cred</span><span class="variable">%h</span><span class="variable">%Creset</span> -<span class="variable">%C</span>(yellow)<span class="variable">%d</span><span class="variable">%Creset</span> <span class="variable">%s</span> <span class="variable">%Cgreen</span>(<span class="variable">%cr</span>) <span class="variable">%C</span>(bold blue)&lt;<span class="variable">%an</span>&gt;<span class="variable">%Creset</span>' --abbrev-commit --"</span></span><br></pre></td></tr></table></figure>
<p>在这之后，我们使用<code>git lg</code>命令就可以了，是不是方便了许多啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>毫无疑问，Git与Github已经逐渐成为开源世界的协作首选了，一些基本的Git入门知识与命令这儿就不再概述了（在此推荐经典入门教程<a href="http://git-scm.com/book/zh/v1" target="_blank" rel="external">]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用volley来开发Android应用程序（一）]]></title>
    <link href="http://yiqivr.com/2014/11/16/%E4%BD%BF%E7%94%A8volley%E6%9D%A5%E5%BC%80%E5%8F%91Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yiqivr.com/2014/11/16/使用volley来开发Android应用程序（一）/</id>
    <published>2014-11-15T23:49:14.000Z</published>
    <updated>2015-08-04T15:15:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是volley">什么是volley</h3><p>volley是Google IO 2003年官方推荐的一个能让HTTP请求更快速、更方便的开源库。volley能让我们写更少更精炼的代码实现强壮的代码，它执行任务默认都是异步的，所以我们不必担心主线程阻塞等问题了。volley有很多实用的功能，比如请求缓存、优化的请求队列和取消任务功能、图片双缓存、还非常方便我们针对自己的项目需求进行拓展。目前该库托管在<a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Google git</a>上。</p>
<h3 id="向项目中添加volley">向项目中添加volley</h3><p>我们可以通过项目引入源码库或者jar包的方式来使用volley，现在简要说明一下第二种方式：</p>
<ul>
<li>安装git和ant（推荐使用brew）</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span>install git</span><br><span class="line">$ <span class="keyword">brew </span>install ant</span><br></pre></td></tr></table></figure>
<p>在安装好brew的前提下分别执行来进行安装。当然，也可以通过安装git客户端和ant包来实现。</p>
<ul>
<li>下载volley source code</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/android.googlesource.com/platform</span><span class="regexp">/frameworks/volley</span></span><br></pre></td></tr></table></figure>
<p>执行上面的命令来克隆一份最新的代码到自己本地，然后再执行</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android <span class="operator"><span class="keyword">update</span> <span class="keyword">project</span> -<span class="keyword">p</span> .</span></span><br></pre></td></tr></table></figure>
<p>来生成我们编译需要的文件，然后执行</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ant</span> jar</span><br></pre></td></tr></table></figure>
<p>成功之后就能再bin目录下看到我们的volley.jar了。（关于编译方式我们也可以选择Android Studio默认的Gradle方式，在此就不说明了）。</p>
<h3 id="如何使用volley">如何使用volley</h3><p>接下来将volley.jar添加到我们的项目之后我们来看看怎么使用，这里先介绍下我们即将用到的几个对象：<code>RequestQueue</code>、<code>Request</code>（<code>StringRequest</code>、<code>ImageRequest</code>、<code>JsonRequest</code>（<code>JsonObjectRequest</code>、<code>JsonArrayRequest</code>））。</p>
<p><code>RequestQueue</code>是请求队列对象，这个队列并不需要我们来维护，我们只需要将<code>Request</code>添加到这个队列里面去就行了，非常简单。<code>Request</code>包含常见的几种请求：字符串、图片、以及JSON，分别对应相应的对象。</p>
<p>接下来我们再看看volley内部的执行流程是怎么样的呢？</p>
<p><img src="http://pic.yupoo.com/lvning10086/EdacCEc1/Y4efi.png" alt=""></p>
<p>从上面的图看以看到分别有三种线程模型，分别是主线程、缓存线程和网络请求线程。当我们添加一个请求到队列中的时候，volley会先检查是否存在缓存，存在的话就直接返回给主线程，如果不存在的话就交给请求线程来处理，在请求队列中成功或失败后再返回给主线程处理。</p>
<p>了解了内部流程之后，我们先来简单的看看怎么发送一个简单的请求：</p>
<pre><code><span class="keyword">final</span> TextView mTextView = (TextView) findViewById(R.id.text);
...
<span class="comment">// Instantiate the RequestQueue.</span>
RequestQueue queue = Volley.newRequestQueue(<span class="keyword">this</span>);
String url =<span class="string">"http://www.google.com"</span>;
<span class="comment">// Request a string response from the provided URL.</span>
StringRequest stringRequest = <span class="keyword">new</span> StringRequest(Request.Method.GET, url,
<span class="keyword">new</span> Response.Listener(){
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span></span>{
        <span class="comment">// Display the first 500 characters of the response string.</span>
        mTextView.setText(<span class="string">"Response is: "</span>+ response.substring(<span class="number">0</span>,<span class="number">500</span>));
    }
}, <span class="keyword">new</span> Response.ErrorListener(){
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError <span class="keyword">error</span>)</span></span>{
        mTextView.setText(<span class="string">"That didn't work!"</span>);
        }
    });
<span class="comment">// Add the request to the RequestQueue.</span>
queue.add(stringRequest);
</code></pre><p>可以看到，我们通过<code>Volley.newRequestQueue(this);</code>方法实例化一个默认的请求队列，然后再传入参数实例化一个请求，最后将这个请求对象添加到我们的队列里面去，然后就在回调函数里面处理请求结果就行了。</p>
<p>但是如何取消一个任务执行呢？volley使用<code>Cancel</code>方法来取消一个请求，不过在这之前，我们得先给这个请求设置一个Tag才行，然后再在想要取消任务的时候调用<code>cancel</code>即可。简要代码如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> TAG = <span class="string">"MyTag"</span>;
StringRequest stringRequest; <span class="comment">// Assume this exists.</span>
RequestQueue mRequestQueue; <span class="comment">// Assume this exists.</span>
<span class="comment">// Set the tag on the request.</span>
stringRequest.setTag(TAG);
<span class="comment">// Add the request to the RequestQueue.</span>
mRequestQueue.<span class="built_in">add</span>(stringRequest);
</code></pre><p>然后再取消（比如在<code>onStop()</code>中）：</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onStop</span> <span class="params">()</span></span>{
    <span class="keyword">super</span>.onStop();
    <span class="keyword">if</span>(mRequestQueue != <span class="keyword">null</span>){
        mRequestQueue.cancelAll(TAG);
    }
}
</code></pre><p>取消任务也非常简单吧。在下一篇文章我们再解释如果自己初始化一个请求队列，而不是使用<code>Volley.newRequestQueue(this);</code>方法生成的默认队列。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是volley">什么是volley</h3><p>volley是Google IO 2003年官方推荐的一个能让HTTP请求更快速、更方便的开源库。volley能让我们写更少更精炼的代码实现强壮的代码，它执行任务默认都是异步的，所以我们不必担心主线程阻塞等问]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于LayoutInflater的inflate方法]]></title>
    <link href="http://yiqivr.com/2014/11/12/%E5%85%B3%E4%BA%8ELayoutInflater%E7%9A%84inflate%E6%96%B9%E6%B3%95/"/>
    <id>http://yiqivr.com/2014/11/12/关于LayoutInflater的inflate方法/</id>
    <published>2014-11-12T02:47:17.000Z</published>
    <updated>2015-08-04T15:11:28.000Z</updated>
    <content type="html"><![CDATA[<p><code>inflater.inflate(R.layout.sample, null);</code>方法是我们经常用到的，比如在<code>adapter</code>的<code>getView(int position, Vew convertView, ViewGroup parent)</code>和<code>fragment</code>的<code>onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</code>方法中。但是这个方法却有个问题，下面我们来做个试验：</p>
<p><em>main.xml</em></p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
    <span class="attribute">android:id</span>=<span class="value">"@+id/container"</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span>
<span class="tag">&lt;<span class="title">LinearLayout</span>/&gt;</span>
</code></pre><p>另外一个布局文件<em>red.xml</em></p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"25dp"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"25dp"</span>
    <span class="attribute">android:background</span>=<span class="value">"#ff0000"</span>
    <span class="attribute">android:text</span>=<span class="value">"red"</span>/&gt;</span>
</code></pre><p>测试代码：</p>
<pre><code>public class <span class="type">InflaterTest</span> extends <span class="type">Activity</span> {
    private <span class="type">View</span> view;
    @<span class="type">Override</span>
    public <span class="type">void</span> onCreate(<span class="type">Bundle</span> savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        <span class="type">ViewGroup</span> parent = (<span class="type">ViewGroup</span>) findViewById(R.id.container);
        // <span class="literal">result</span>: layout_height=wrap_content layout_width=match_parent
        view = <span class="type">LayoutInflater</span>.<span class="keyword">from</span>(this).inflate(R.layout.red, null);
        parent.addView(view);
        // <span class="literal">result</span>: layout_height=<span class="number">100</span> layout_width=<span class="number">100</span>
        view = <span class="type">LayoutInflater</span>.<span class="keyword">from</span>(this).inflate(R.layout.red, null);
        parent.addView(view, <span class="number">100</span>, <span class="number">100</span>);
        // <span class="literal">result</span>: layout_height=<span class="number">25</span>dp layout_width=<span class="number">25</span>dp
        // view=textView due to attachRoot=<span class="literal">false</span>
        view = <span class="type">LayoutInflater</span>.<span class="keyword">from</span>(this).inflate(R.layout.red, parent, <span class="literal">false</span>);
        parent.addView(view);
        // <span class="literal">result</span>: layout_height=<span class="number">25</span>dp layout_width=<span class="number">25</span>dp
        // parent.addView <span class="keyword">not</span> necessary <span class="keyword">as</span> this <span class="keyword">is</span> already done by attachRoot=<span class="literal">true</span>
        // view=root due to parent supplied <span class="keyword">as</span> hierarchy root <span class="keyword">and</span> attachRoot=<span class="literal">true</span>
        view = <span class="type">LayoutInflater</span>.<span class="keyword">from</span>(this).inflate(R.layout.red, parent, <span class="literal">true</span>);
    }
}
</code></pre><p>由上面的结果可以知道，除了使用最后一种方法，其他方法不额外设置宽高的话，其他的都会忽略掉<em>red.xml</em>文件顶层布局宽高信息。还有一种做法就是在<em>red.xml</em>中再添加一层父布局，这样也能达到预期的效果，但是这样做对于布局的性能是很受影响的（可以使用强大的工具<a href="http://developer.android.com/guide/developing/tools/hierarchy-viewer.html" target="_blank" rel="external">hierarchy viewer</a>来检测），特别是在<code>adapter</code>的<code>getView</code>中。但是使用<code>inflate(int resource, ViewGroup root, boolean attachToRoot)</code>方法的话，不仅可以节省代码量，而且可以很好的减少布局带来的性能消耗。</p>
<p>其他情况：当我们在自定义<code>AlertDialog</code>的显示内容时，<code>AlertDialog</code>并没有把布局ID作为参数的<code>setView()</code>方法，而是直接传入要显示的<code>View</code>，这时我们也要用到<code>LayoutInflater</code>，这时我们并没有那个<code>parentView</code>（事实上也并不存在这个<code>View</code>），现在我们只能用<code>inflate(int resource, ViewGroup&lt;/em&gt; root)</code>方法了，因为<code>AlertDialog</code>会擦除传入的<code>View</code>的<code>LayoutParams</code>信息，并且替换成<code>match_parent</code>。</p>
<p>综上，让我们尝试把<code>inflater.inflate(R.layout.sample, null);</code>改成<code>inflater.inflate(R.layout.sample, parent, false);</code>吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>inflater.inflate(R.layout.sample, null);</code>方法是我们经常用到的，比如在<code>adapter</code>的<code>getView(int position, Vew convertView, View]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决Mac OS X 升级10.10(Yosemite)后ADT(Eclipse)无法找到真机]]></title>
    <link href="http://yiqivr.com/2014/10/24/%E8%A7%A3%E5%86%B3Mac-OS-X-%E5%8D%87%E7%BA%A710-10-Yosemite-%E5%90%8EADT-Eclipse-%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E7%9C%9F%E6%9C%BA/"/>
    <id>http://yiqivr.com/2014/10/24/解决Mac-OS-X-升级10-10-Yosemite-后ADT-Eclipse-无法找到真机/</id>
    <published>2014-10-24T00:07:26.000Z</published>
    <updated>2015-08-04T06:41:48.000Z</updated>
    <content type="html"><![CDATA[<p>升级Yosemite之后继续开发Android，发现当编译版本高于设备版本的时候设备选择器找不到真机了，WTF！难道要改低版本SDK开发不成？臣妾做不到啊！</p>
<p>后来捣鼓了一阵，发现解决方案有两个：</p>
<ul>
<li>弹出设备选择器后，拖动第一行分割线（也就是Serial Number/AVD Name…那行）来改变宽度，我们的设备又神奇的出现了，看来是布局出了点问题。见图：</li>
</ul>
<p><img src="http://pic.yupoo.com/lvning10086/E9Fom1w2/sOlUp.png" alt=""></p>
<ul>
<li>弹出设备选择器后，拔掉真机，然后插上真机，设备又现身了。</li>
</ul>
<p>希望能帮助遇到同样困扰的童鞋~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>升级Yosemite之后继续开发Android，发现当编译版本高于设备版本的时候设备选择器找不到真机了，WTF！难道要改低版本SDK开发不成？臣妾做不到啊！</p>
<p>后来捣鼓了一阵，发现解决方案有两个：</p>
<ul>
<li>弹出设备选择器后，拖动第一行分割线（也]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用权重居中控件]]></title>
    <link href="http://yiqivr.com/2014/09/12/%E4%BD%BF%E7%94%A8%E6%9D%83%E9%87%8D%E5%B1%85%E4%B8%AD%E6%8E%A7%E4%BB%B6/"/>
    <id>http://yiqivr.com/2014/09/12/使用权重居中控件/</id>
    <published>2014-09-12T06:47:16.000Z</published>
    <updated>2015-08-04T06:43:32.000Z</updated>
    <content type="html"><![CDATA[<p>之前看完《50  Android Hacks》这本电子书就放一边了，趁最近有点闲的蛋疼，把其中一些鲜为人知觉得有用的“Hacks(绝招)”分享一下，一共16个，其余剩下的34个需要的朋友可以回复索要电子书自行阅读，这是这个系列的第一篇。</p>
<p>大家看完标题可能觉得这不so easy 吗，别急，我先说清楚要实现的需求：<strong>不仅要将一个控件（暂定为按钮吧）居中，还要将它的宽度设置为屏幕的一半，并且适配横竖屏</strong>。</p>
<p>先来看看效果图：</p>
<p><img src="http://pic.yupoo.com/lvning10086/E21Q5zLe/medium.jpg" alt=""></p>
<p>看完需求大家可能第一时间的解决方案是：将这个.9作为背景的按钮放在RelativeLayout或者LinearLayout中居中，然后用代码设置按钮宽度，然后检测屏幕方向切换的适合再次设置。</p>
<p>确实有点扯淡，其实Android已经给大家提供好了相应的属性来进行设置，就是使用<code>LinearLayout</code>的<code>android:layout_weight</code>属性和<code>android:weightSum</code>属性配合使用即可，这才是最佳实践。</p>
<p>解释一下这两个属性：<code>android:weightSum</code>用在<code>LinearLayout</code>中，表示总权重，<code>android:layout_weight</code>用在包裹的控件中，表示自己所占的权重比例。好了，有了斧头，还得知道怎么用才行，翠花！上代码~</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span>
    <span class="attribute">android:background</span>=<span class="value">"#FFFFFF"</span>
    <span class="attribute">android:gravity</span>=<span class="value">"center"</span>
    <span class="attribute">android:orientation</span>=<span class="value">"horizontal"</span>
    <span class="attribute">android:weightSum</span>=<span class="value">"1"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">Button</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"0dp"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>
    <span class="attribute">android:layout_weight</span>=<span class="value">"0.5"</span>
    <span class="attribute">android:text</span>=<span class="value">"Click me"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span>
</code></pre><p>这段布局代码需要注意的地方有三个，线性布局我们把<code>weightSum</code>设置为1方便计算，然后设置居中，里面包裹的控件设置权重<code>layout_weight</code>为0.5，表示宽度需要为父布局的一半，同理如果设置为0.75则表示设置宽度为父布局的75%，同时避免干扰需要将<code>layout_width</code>设置为0dp，好了，使用这两个简单的属性就能实现上图的需求了，同时帮我们节省了很多的代码量。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前看完《50  Android Hacks》这本电子书就放一边了，趁最近有点闲的蛋疼，把其中一些鲜为人知觉得有用的“Hacks(绝招)”分享一下，一共16个，其余剩下的34个需要的朋友可以回复索要电子书自行阅读，这是这个系列的第一篇。</p>
<p>大家看完标题可能觉得这]]>
    </summary>
    
      <category term="Android" scheme="http://yiqivr.com/tags/Android/"/>
    
  </entry>
  
</feed>